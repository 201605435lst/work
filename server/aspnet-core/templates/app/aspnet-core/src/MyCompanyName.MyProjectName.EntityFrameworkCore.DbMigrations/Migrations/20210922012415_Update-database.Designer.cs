// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyCompanyName.MyProjectName.EntityFrameworkCore;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SnAbp.EntityFrameworkCore;

namespace MyCompanyName.MyProjectName.Migrations
{
    [DbContext(typeof(MyProjectNameMigrationsDbContext))]
    [Migration("20210922012415_Update-database")]
    partial class Updatedatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("_Abp_DatabaseProvider", EfCoreDatabaseProvider.PostgreSql)
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("SnAbp.Alarm.Entities.Alarm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ActivedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ClearedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("ConfirmedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.ToTable("Sn_Alarm_Alarm");
                });

            modelBuilder.Entity("SnAbp.Alarm.Entities.AlarmConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComponentCategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("MaxValue")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MinValue")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ComponentCategoryId");

                    b.ToTable("Sn_Alarm_AlarmConfig");
                });

            modelBuilder.Entity("SnAbp.Alarm.Entities.AlarmEquipmentIdBind", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("EquipmentThirdIds")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Sn_Alarm_AlarmEquipmentIdBind");
                });

            modelBuilder.Entity("SnAbp.BackgroundJobs.BackgroundJobRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsAbandoned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("JobArgs")
                        .IsRequired()
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("LastTryTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("NextTryTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)15);

                    b.Property<short>("TryCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.HasKey("Id");

                    b.HasIndex("IsAbandoned", "NextTryTime");

                    b.ToTable("AbpBackgroundJobs");
                });

            modelBuilder.Entity("SnAbp.Basic.Entities.InstallationSite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CSRGCode")
                        .HasColumnType("text");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CodeName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("KMMark")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Latitude")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("LocationType")
                        .HasColumnType("integer");

                    b.Property<string>("Longitude")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<int?>("RailwayDirection")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RailwayId")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<Guid?>("StationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UseType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CodeName")
                        .IsUnique();

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ParentId");

                    b.HasIndex("RailwayId");

                    b.HasIndex("StationId");

                    b.HasIndex("TypeId");

                    b.ToTable("Sn_Basic_InstallationSite");
                });

            modelBuilder.Entity("SnAbp.Basic.Entities.Railway", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Sn_Basic_Railway");
                });

            modelBuilder.Entity("SnAbp.Basic.Entities.RailwayRltOrganization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("DownLinkEndKM")
                        .HasColumnType("integer");

                    b.Property<int>("DownLinkStartKM")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RailwayId")
                        .HasColumnType("uuid");

                    b.Property<int>("UpLinkEndKM")
                        .HasColumnType("integer");

                    b.Property<int>("UpLinkStartKM")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RailwayId");

                    b.ToTable("Sn_Basic_RailwayRltOrganization");
                });

            modelBuilder.Entity("SnAbp.Basic.Entities.Station", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<Guid?>("SectionEndStationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SectionStartStationId")
                        .HasColumnType("uuid");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("SectionEndStationId");

                    b.HasIndex("SectionStartStationId");

                    b.ToTable("Sn_Basic_Station");
                });

            modelBuilder.Entity("SnAbp.Basic.Entities.StationRltOrganization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsBackUp")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("StationId");

                    b.ToTable("Sn_Basic_StationRltOrganization");
                });

            modelBuilder.Entity("SnAbp.Basic.Entities.StationRltRailway", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("KMMark")
                        .HasColumnType("integer");

                    b.Property<int>("PassOrder")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RailwayId")
                        .HasColumnType("uuid");

                    b.Property<int>("RailwayType")
                        .HasColumnType("integer");

                    b.Property<Guid>("StationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RailwayId");

                    b.HasIndex("StationId");

                    b.ToTable("Sn_Basic_StationRltRailway");
                });

            modelBuilder.Entity("SnAbp.Bpm.Entities.FlowTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FormTemplateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FormTemplateId");

                    b.ToTable("Sn_Bpm_FlowTemplate");
                });

            modelBuilder.Entity("SnAbp.Bpm.Entities.FlowTemplateNode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<Guid>("FlowTemplateId")
                        .HasColumnType("uuid");

                    b.Property<string>("FormItemPermisstions")
                        .HasColumnType("jsonb");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<List<float>>("Size")
                        .HasColumnType("real[]");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<float>("X")
                        .HasColumnType("real");

                    b.Property<float>("Y")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("FlowTemplateId");

                    b.ToTable("Sn_Bpm_FlowTemplateNode");
                });

            modelBuilder.Entity("SnAbp.Bpm.Entities.FlowTemplateNodeRltMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FlowTemplateNodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FlowTemplateNodeId");

                    b.ToTable("Sn_Bpm_FlowTemplateNodeRltMember");
                });

            modelBuilder.Entity("SnAbp.Bpm.Entities.FlowTemplateStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<Guid>("FlowTemplateId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Source")
                        .HasColumnType("uuid");

                    b.Property<int>("SourceAnchor")
                        .HasColumnType("integer");

                    b.Property<int?>("State")
                        .HasColumnType("integer");

                    b.Property<Guid>("Target")
                        .HasColumnType("uuid");

                    b.Property<int>("TargetAnchor")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FlowTemplateId");

                    b.ToTable("Sn_Bpm_FlowTemplateStep");
                });

            modelBuilder.Entity("SnAbp.Bpm.Entities.FormTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Config")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("FormItems")
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<Guid>("WorkflowTemplateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowTemplateId");

                    b.ToTable("Sn_Bpm_FormTemplate");
                });

            modelBuilder.Entity("SnAbp.Bpm.Entities.Workflow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FlowTemplateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FlowTemplateId");

                    b.ToTable("Sn_Bpm_Workflow");
                });

            modelBuilder.Entity("SnAbp.Bpm.Entities.WorkflowData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("FormValues")
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SourceNodeId")
                        .HasColumnType("uuid");

                    b.Property<int?>("StepState")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TargetNodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkflowId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowId");

                    b.ToTable("Sn_Bpm_WorkflowData");
                });

            modelBuilder.Entity("SnAbp.Bpm.Entities.WorkflowStateRltMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<int>("Group")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<int>("MemberType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<Guid>("WorkflowId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowId");

                    b.ToTable("Sn_Bpm_WorkflowStateRltMember");
                });

            modelBuilder.Entity("SnAbp.Bpm.Entities.WorkflowTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsStatic")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("WebHookUrl")
                        .HasColumnType("text");

                    b.Property<Guid?>("WorkflowTemplateGroupId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("WorkflowTemplateGroupId");

                    b.ToTable("Sn_Bpm_WorkflowTemplate");
                });

            modelBuilder.Entity("SnAbp.Bpm.Entities.WorkflowTemplateGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Sn_Bpm_WorkflowTemplateGroup");
                });

            modelBuilder.Entity("SnAbp.Bpm.Entities.WorkflowTemplateRltMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid>("WorkflowTemplateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowTemplateId");

                    b.ToTable("Sn_Bpm_WorkflowTemplateRltMember");
                });

            modelBuilder.Entity("SnAbp.Cms.Entities.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Author")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Summary")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<Guid?>("ThumbId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ThumbId");

                    b.ToTable("Sn_Cms_Article");
                });

            modelBuilder.Entity("SnAbp.Cms.Entities.ArticleAccessory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("FileId");

                    b.ToTable("Sn_Cms_ArticleAccessory");
                });

            modelBuilder.Entity("SnAbp.Cms.Entities.ArticleCarousel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("FileId");

                    b.ToTable("Sn_Cms_ArticleCarousel");
                });

            modelBuilder.Entity("SnAbp.Cms.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Summary")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<Guid?>("ThumbId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("ThumbId");

                    b.ToTable("Sn_Cms_Category");
                });

            modelBuilder.Entity("SnAbp.Cms.Entities.CategoryRltArticle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Sn_Cms_CategoryRltArticle");
                });

            modelBuilder.Entity("SnAbp.Common.Entities.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<int>("Deep")
                        .HasColumnType("integer");

                    b.Property<string>("FullCode")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<string>("PinYin")
                        .HasColumnType("text");

                    b.Property<string>("PinYinPrefix")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Sn_Common_Area");
                });

            modelBuilder.Entity("SnAbp.Common.Entities.QRCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Border")
                        .HasColumnType("boolean");

                    b.Property<string>("ImageBase64Str")
                        .HasColumnType("text");

                    b.Property<decimal>("ImageSize")
                        .HasColumnType("numeric");

                    b.Property<bool>("ShowLog")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Size")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Version")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Sn_Common_QRCode");
                });

            modelBuilder.Entity("SnAbp.Construction.Entities.Daily", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AirQuality")
                        .HasColumnType("text");

                    b.Property<int>("BuilderCount")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DailyTemplateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DispatchId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InformantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Summary")
                        .HasColumnType("text");

                    b.Property<string>("Team")
                        .HasColumnType("text");

                    b.Property<string>("Temperature")
                        .HasColumnType("text");

                    b.Property<string>("Weathers")
                        .HasColumnType("text");

                    b.Property<string>("WindDirection")
                        .HasColumnType("text");

                    b.Property<Guid?>("WorkflowId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WorkflowTemplateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DailyTemplateId");

                    b.HasIndex("DispatchId");

                    b.HasIndex("InformantId");

                    b.HasIndex("WorkflowId");

                    b.HasIndex("WorkflowTemplateId");

                    b.ToTable("Sn_Construction_Daily");
                });

            modelBuilder.Entity("SnAbp.Construction.Entities.DailyFlowInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DailyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<Guid>("WorkFlowId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DailyId");

                    b.ToTable("Sn_Construction_DailyFlowInfo");
                });

            modelBuilder.Entity("SnAbp.Construction.Entities.DailyRltFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DailyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DailyId");

                    b.HasIndex("FileId");

                    b.ToTable("Sn_Construction_DailyRltFile");
                });

            modelBuilder.Entity("SnAbp.Construction.Entities.DailyRltPlanMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<Guid>("DailyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlanMaterialId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DailyId");

                    b.HasIndex("PlanMaterialId");

                    b.ToTable("Sn_Construction_DailyRltPlanMaterial");
                });

            modelBuilder.Entity("SnAbp.Construction.Entities.DailyRltQuality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DailyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QualityProblemId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DailyId");

                    b.HasIndex("QualityProblemId");

                    b.ToTable("Sn_Construction_DailyRltQuality");
                });

            modelBuilder.Entity("SnAbp.Construction.Entities.DailyRltSafe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DailyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SafeProblemId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DailyId");

                    b.HasIndex("SafeProblemId");

                    b.ToTable("Sn_Construction_DailyRltSafe");
                });

            modelBuilder.Entity("SnAbp.Construction.Entities.DailyTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sn_Construction_DailyTemplate");
                });

            modelBuilder.Entity("SnAbp.Construction.Entities.Dispatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<Guid>("ContractorId")
                        .HasColumnType("uuid");

                    b.Property<string>("ControlType")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DispatchTemplateId")
                        .HasColumnType("uuid");

                    b.Property<string>("ExtraDescription")
                        .HasColumnType("text");

                    b.Property<bool>("IsDismantle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHighWork")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNeedLargeEquipment")
                        .HasColumnType("boolean");

                    b.Property<string>("LargeEquipment")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Process")
                        .HasColumnType("text");

                    b.Property<string>("Profession")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("RecoveryTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("RiskSources")
                        .HasColumnType("text");

                    b.Property<string>("SafetyMeasure")
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<string>("Team")
                        .HasColumnType("text");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("WorkflowId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WorkflowTemplateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DispatchTemplateId");

                    b.HasIndex("WorkflowId");

                    b.HasIndex("WorkflowTemplateId");

                    b.ToTable("Sn_Construction_Dispatch");
                });

            modelBuilder.Entity("SnAbp.Construction.Entities.DispatchRltFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DispatchId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DispatchId");

                    b.HasIndex("FileId");

                    b.ToTable("Sn_Construction_DispatchRltFile");
                });

            modelBuilder.Entity("SnAbp.Construction.Entities.DispatchRltMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Count")
                        .HasColumnType("numeric");

                    b.Property<Guid>("DispatchId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DispatchId");

                    b.HasIndex("MaterialId");

                    b.ToTable("Sn_Construction_DispatchRltMaterial");
                });

            modelBuilder.Entity("SnAbp.Construction.Entities.DispatchRltPlanContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DispatchId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlanContentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DispatchId");

                    b.HasIndex("PlanContentId");

                    b.ToTable("Sn_Construction_DispatchRltPlanContent");
                });

            modelBuilder.Entity("SnAbp.Construction.Entities.DispatchRltSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DispatchId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DispatchId");

                    b.HasIndex("SectionId");

                    b.ToTable("Sn_Construction_DispatchRltSection");
                });

            modelBuilder.Entity("SnAbp.Construction.Entities.DispatchRltStandard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DispatchId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StandardId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DispatchId");

                    b.HasIndex("StandardId");

                    b.ToTable("Sn_Construction_DispatchRltStandard");
                });

            modelBuilder.Entity("SnAbp.Construction.Entities.DispatchRltWorkFlow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DispatchId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<Guid>("WorkFlowId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DispatchId");

                    b.ToTable("Sn_Construction_DispatchRltWorkFlow");
                });

            modelBuilder.Entity("SnAbp.Construction.Entities.DispatchRltWorker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DispatchId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DispatchId");

                    b.HasIndex("WorkerId");

                    b.ToTable("Sn_Construction_DispatchRltWorker");
                });

            modelBuilder.Entity("SnAbp.Construction.Entities.DispatchTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sn_Construction_DispatchTemplate");
                });

            modelBuilder.Entity("SnAbp.Construction.Entities.UnplannedTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<Guid>("DailyId")
                        .HasColumnType("uuid");

                    b.Property<int>("TaskType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DailyId");

                    b.ToTable("Sn_Construction_UnplannedTask");
                });

            modelBuilder.Entity("SnAbp.Construction.MasterPlans.Entities.MasterPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ChargerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<double>("Period")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("PlanEndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("PlanStartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<Guid?>("WorkflowId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WorkflowTemplateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChargerId");

                    b.HasIndex("WorkflowId");

                    b.HasIndex("WorkflowTemplateId");

                    b.ToTable("Sn_Construction_MasterPlan");
                });

            modelBuilder.Entity("SnAbp.Construction.MasterPlans.Entities.MasterPlanContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsMilestone")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MasterPlanId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<double>("Period")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("PlanEndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("PlanStartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("SubItemContentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MasterPlanId")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.HasIndex("SubItemContentId");

                    b.ToTable("Sn_Construction_MasterPlanContent");
                });

            modelBuilder.Entity("SnAbp.Construction.MasterPlans.Entities.MasterPlanRltContentRltAntecedent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("FrontMasterPlanContentId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MasterPlanContentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MasterPlanContentId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FrontMasterPlanContentId");

                    b.HasIndex("MasterPlanContentId");

                    b.HasIndex("MasterPlanContentId1")
                        .HasName("IX_Sn_Construction_MasterPlanRltContentRltAntecedent_MasterPl~1");

                    b.ToTable("Sn_Construction_MasterPlanRltContentRltAntecedent");
                });

            modelBuilder.Entity("SnAbp.Construction.MasterPlans.Entities.MasterPlanRltWorkflowInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MasterPlanId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WorkflowId")
                        .HasColumnType("uuid");

                    b.Property<int>("WorkflowState")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MasterPlanId");

                    b.HasIndex("WorkflowId");

                    b.ToTable("Sn_Construction_MasterPlanRltWorkflowInfo");
                });

            modelBuilder.Entity("SnAbp.Construction.Plans.Plan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ChargerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MasterPlanId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<double>("Period")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("PlanEndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("PlanStartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<Guid?>("WorkflowId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WorkflowTemplateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChargerId");

                    b.HasIndex("MasterPlanId");

                    b.HasIndex("WorkflowId");

                    b.HasIndex("WorkflowTemplateId");

                    b.ToTable("Sn_Construction_Plan");
                });

            modelBuilder.Entity("SnAbp.Construction.Plans.PlanContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("AllProgress")
                        .HasColumnType("double precision");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsMilestone")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<double>("Period")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("PlanEndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("PlanId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PlanStartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SubItemContentId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("WorkDay")
                        .HasColumnType("numeric");

                    b.Property<int>("WorkerNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("PlanId")
                        .IsUnique();

                    b.HasIndex("SubItemContentId");

                    b.ToTable("Sn_Construction_PlanContent");
                });

            modelBuilder.Entity("SnAbp.Construction.Plans.PlanContentRltAntecedent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("FrontPlanContentId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PlanContentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PlanContentId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FrontPlanContentId");

                    b.HasIndex("PlanContentId");

                    b.HasIndex("PlanContentId1");

                    b.ToTable("Sn_Construction_PlanContentRltAntecedent");
                });

            modelBuilder.Entity("SnAbp.Construction.Plans.PlanContentRltFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PlanContentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("PlanContentId");

                    b.ToTable("Sn_Construction_PlanContentRltFile");
                });

            modelBuilder.Entity("SnAbp.Construction.Plans.PlanContentRltMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PlanContentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PlanContentId");

                    b.ToTable("Sn_Construction_PlanContentRltMaterial");
                });

            modelBuilder.Entity("SnAbp.Construction.Plans.PlanMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ComponentCategoryName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PlanContentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<string>("Spec")
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.Property<decimal>("WorkDay")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("PlanContentId");

                    b.ToTable("Sn_Construction_PlanMaterial");
                });

            modelBuilder.Entity("SnAbp.Construction.Plans.PlanMaterialRltEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlanMaterialId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("PlanMaterialId");

                    b.ToTable("Sn_Construction_PlanMaterialRltEquipment");
                });

            modelBuilder.Entity("SnAbp.Construction.Plans.PlanRltWorkflowInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PlanId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<Guid>("WorkFlowId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.ToTable("Sn_Construction_PlanRltWorkflowInfo");
                });

            modelBuilder.Entity("SnAbp.ConstructionBase.Entities.ConstructionBaseMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPartyAProvide")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSelf")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<int>("PrePurchaseDays")
                        .HasColumnType("integer");

                    b.Property<int>("PresentDays")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<int>("Unit")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Sn_ConstructionBase_Material");
                });

            modelBuilder.Entity("SnAbp.ConstructionBase.Entities.EquipmentTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Cost")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Spec")
                        .HasColumnType("text");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Sn_ConstructionBase_EquipmentTeam");
                });

            modelBuilder.Entity("SnAbp.ConstructionBase.Entities.Procedure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Sn_ConstructionBase_Procedure");
                });

            modelBuilder.Entity("SnAbp.ConstructionBase.Entities.ProcedureEquipmentTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EquipmentTeamId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProcedureId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentTeamId");

                    b.HasIndex("ProcedureId");

                    b.ToTable("Sn_ConstructionBase_ProcedureEquipmentTeam");
                });

            modelBuilder.Entity("SnAbp.ConstructionBase.Entities.ProcedureMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ConstructionBaseMaterialId")
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProcedureId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ConstructionBaseMaterialId");

                    b.HasIndex("ProcedureId");

                    b.ToTable("Sn_ConstructionBase_ProcedureMaterial");
                });

            modelBuilder.Entity("SnAbp.ConstructionBase.Entities.ProcedureRltFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProcedureId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("ProcedureId");

                    b.ToTable("Sn_ConstructionBase_ProcedureRltFile");
                });

            modelBuilder.Entity("SnAbp.ConstructionBase.Entities.ProcedureWorker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProcedureId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProcedureId");

                    b.HasIndex("WorkerId");

                    b.ToTable("Sn_ConstructionBase_ProcedureWorker");
                });

            modelBuilder.Entity("SnAbp.ConstructionBase.Entities.RltProcedureRltEquipmentTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<Guid>("EquipmentTeamId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RltProcedureId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SubItemContentRltProcedureId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentTeamId");

                    b.HasIndex("SubItemContentRltProcedureId");

                    b.ToTable("Sn_ConstructionBase_RltProcedureRltEquipmentTeam");
                });

            modelBuilder.Entity("SnAbp.ConstructionBase.Entities.RltProcedureRltFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RltProcedureId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SubItemContentRltProcedureId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("SubItemContentRltProcedureId");

                    b.ToTable("Sn_ConstructionBase_RltProcedureRltFile");
                });

            modelBuilder.Entity("SnAbp.ConstructionBase.Entities.RltProcedureRltMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ConstructionBaseMaterialId")
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RltProcedureId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SubItemContentRltProcedureId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ConstructionBaseMaterialId");

                    b.HasIndex("SubItemContentRltProcedureId");

                    b.ToTable("Sn_ConstructionBase_RltProcedureRltMaterial");
                });

            modelBuilder.Entity("SnAbp.ConstructionBase.Entities.RltProcedureRltWorker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<Guid>("RltProcedureId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SubItemContentRltProcedureId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubItemContentRltProcedureId");

                    b.HasIndex("WorkerId");

                    b.ToTable("Sn_ConstructionBase_RltProcedureRltWorker");
                });

            modelBuilder.Entity("SnAbp.ConstructionBase.Entities.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Desc")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Sn_ConstructionBase_Section");
                });

            modelBuilder.Entity("SnAbp.ConstructionBase.Entities.Standard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("ProfessionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionId");

                    b.ToTable("Sn_ConstructionBase_Standard");
                });

            modelBuilder.Entity("SnAbp.ConstructionBase.Entities.SubItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Sn_ConstructionBase_SubItem");
                });

            modelBuilder.Entity("SnAbp.ConstructionBase.Entities.SubItemContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("NodeType")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<Guid?>("SubItemId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("SubItemId")
                        .IsUnique();

                    b.ToTable("Sn_ConstructionBase_SubItemContent");
                });

            modelBuilder.Entity("SnAbp.ConstructionBase.Entities.SubItemContentRltProcedure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProcedureId")
                        .HasColumnType("uuid");

                    b.Property<int>("Sort")
                        .HasColumnType("integer");

                    b.Property<Guid>("SubItemContentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProcedureId");

                    b.HasIndex("SubItemContentId");

                    b.ToTable("Sn_ConstructionBase_SubItemContentRltProcedure");
                });

            modelBuilder.Entity("SnAbp.ConstructionBase.Entities.Worker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sn_ConstructionBase_Worker");
                });

            modelBuilder.Entity("SnAbp.CostManagement.Entities.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Money")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Sn_CostManagement_Contract");
                });

            modelBuilder.Entity("SnAbp.CostManagement.Entities.ContractRltFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("FileId");

                    b.ToTable("Sn_CostManagement_ContractRltFile");
                });

            modelBuilder.Entity("SnAbp.CostManagement.Entities.CostOther", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Money")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Sn_CostManagement_CostOther");
                });

            modelBuilder.Entity("SnAbp.CostManagement.Entities.MoneyList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("Due")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Paid")
                        .HasColumnType("numeric");

                    b.Property<Guid>("PayeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Receivable")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Received")
                        .HasColumnType("numeric");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PayeeId");

                    b.HasIndex("TypeId");

                    b.ToTable("Sn_CostManagement_MoneyList");
                });

            modelBuilder.Entity("SnAbp.CostManagement.Entities.PeopleCost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Money")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PayeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProfessionalId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PayeeId");

                    b.HasIndex("ProfessionalId");

                    b.ToTable("Sn_CostManagement_PeopleCost");
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.AlterRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AR_Key")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AlterTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("AlterType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PlanTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Reason")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<Guid?>("RepairTagId")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("RepairTagId");

                    b.ToTable("Sn_CrPlan_AlterRecord");
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.DailyPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Count")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<DateTime>("PlanDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uuid");

                    b.Property<int>("PlanType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RepairTagId")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RepairTagId");

                    b.ToTable("Sn_CrPlan_DailyPlan");
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.DailyPlanAlter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AlterCount")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<Guid>("AlterRecordId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AlterTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DailyId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("PlanCount")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<string>("Remark")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<Guid?>("RepairTagId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RepairTagId");

                    b.ToTable("Sn_CrPlan_DailyPlanAlter");
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.EquipmentTestResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CheckResult")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("MaxRated")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MinRated")
                        .HasColumnType("numeric");

                    b.Property<Guid>("PlanRelateEquipmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("PredictedValue")
                        .HasColumnType("text");

                    b.Property<Guid?>("RepairTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uuid");

                    b.Property<string>("TestName")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("TestResult")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("TestType")
                        .HasColumnType("integer");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("RepairTagId");

                    b.ToTable("Sn_CrPlan_EquipmentTestResult");
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.MaintenanceWork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ARKey")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MaintenanceProject")
                        .HasColumnType("text");

                    b.Property<int>("MaintenanceType")
                        .HasColumnType("integer");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<string>("RepairLevel")
                        .HasColumnType("text");

                    b.Property<Guid?>("RepairTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SecondARKey")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RepairTagId");

                    b.ToTable("Sn_CrPlan_MaintenanceWork");
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.MaintenanceWorkRltFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaintenanceWorkId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RelateFileId")
                        .HasColumnType("uuid");

                    b.Property<string>("SchemeCoverName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("MaintenanceWorkId");

                    b.HasIndex("RelateFileId");

                    b.ToTable("Sn_CrPlan_MaintenanceWorkRltFile");
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.MaintenanceWorkRltSkylightPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstTrial")
                        .HasColumnType("text");

                    b.Property<Guid>("MaintenanceWorkId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("SignOrganization")
                        .HasColumnType("text");

                    b.Property<Guid>("SkylightPlanId")
                        .HasColumnType("uuid");

                    b.Property<string>("WorkOrgAndDutyPerson")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceWorkId");

                    b.HasIndex("SkylightPlanId");

                    b.ToTable("Sn_CrPlan_MaintenanceWorkRltSkylightPlan");
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.PlanDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DailyPlanId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InfluenceRangeId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("PlanCount")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<Guid?>("RepairTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SkylightPlanId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("WorkCount")
                        .HasColumnType("decimal(13, 3)");

                    b.HasKey("Id");

                    b.HasIndex("InfluenceRangeId");

                    b.HasIndex("RepairTagId");

                    b.ToTable("Sn_CrPlan_PlanDetail");
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.PlanRelateEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EquipmentId")
                        .HasColumnType("uuid");

                    b.Property<int>("IsComplete")
                        .HasColumnType("integer");

                    b.Property<decimal>("PlanCount")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<Guid>("PlanDetailId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RepairTagId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("WorkCount")
                        .HasColumnType("decimal(13, 3)");

                    b.HasKey("Id");

                    b.HasIndex("RepairTagId");

                    b.ToTable("Sn_CrPlan_PlanRelateEquipment");
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.RepairUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Duty")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PlanRelateEquipmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<Guid?>("RepairTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WorkerOrderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RepairTagId");

                    b.ToTable("Sn_CrPlan_RepairUser");
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.SkylightPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ChangTime")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EndStationId")
                        .HasColumnType("uuid");

                    b.Property<int>("EndStationRelateRailwayType")
                        .HasColumnType("integer");

                    b.Property<string>("Incidence")
                        .HasColumnType("text");

                    b.Property<bool>("IsAdjacent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsChange")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOnRoad")
                        .HasColumnType("boolean");

                    b.Property<string>("Level")
                        .HasColumnType("text");

                    b.Property<string>("Opinion")
                        .HasColumnType("text");

                    b.Property<int>("PlanState")
                        .HasColumnType("integer");

                    b.Property<int>("PlanType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RailwayId")
                        .HasColumnType("uuid");

                    b.Property<string>("RegistrationPlace")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<Guid?>("RepairTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ResponsibleUser")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Station")
                        .HasColumnType("uuid");

                    b.Property<int>("StationRelateRailwayType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SubmitUser")
                        .HasColumnType("uuid");

                    b.Property<int>("TimeLength")
                        .HasColumnType("integer");

                    b.Property<string>("WorkArea")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<Guid?>("WorkAreaId")
                        .HasColumnType("uuid");

                    b.Property<string>("WorkContent")
                        .HasColumnType("text");

                    b.Property<int?>("WorkContentType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("WorkTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("WorkUnit")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RailwayId");

                    b.HasIndex("RepairTagId");

                    b.ToTable("Sn_CrPlan_SkylightPlan");
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.SkylightPlanRltInstallationSite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("InstallationSiteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SkylightPlanId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("InstallationSiteId");

                    b.HasIndex("SkylightPlanId");

                    b.ToTable("Sn_CrPlan_SkylightPlanRltInstallationSite");
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.SkylightPlanRltWorkTicket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("SkylightPlanId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkTicketId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SkylightPlanId");

                    b.HasIndex("WorkTicketId");

                    b.ToTable("Sn_CrPlan_SkylightPlanRltWorkTicket");
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.StatisticsEquipmentWorker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("Changed")
                        .HasColumnType("real");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<float>("Finshed")
                        .HasColumnType("real");

                    b.Property<string>("GroupName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<int>("Month")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrgizationId")
                        .HasColumnType("uuid");

                    b.Property<string>("OrgizationName")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<float>("UnFinshed")
                        .HasColumnType("real");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Sn_CrPlan_StatisticsEquipmentWorker");
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.StatisticsPieWorker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("Changed")
                        .HasColumnType("real");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<float>("Finshed")
                        .HasColumnType("real");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<int>("Month")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrgizationId")
                        .HasColumnType("uuid");

                    b.Property<string>("OrgizationName")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<float>("UnFinshed")
                        .HasColumnType("real");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Sn_CrPlan_StatisticsPieWorker");
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.WorkOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Announcements")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DispatchingTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EndPlanTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EndRealityTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Feedback")
                        .HasColumnType("text");

                    b.Property<string>("InfluenceScope")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("OrderNo")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("OrderState")
                        .HasColumnType("integer");

                    b.Property<int>("OrderType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RepairTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SendWorkersId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SkylightPlanId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartPlanTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("StartRealityTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ToolSituation")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RepairTagId");

                    b.ToTable("Sn_CrPlan_WorkOrder");
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.WorkOrderTestAdditional", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<string>("TestConctent")
                        .HasColumnType("text");

                    b.Property<Guid>("WorkOrderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Sn_CrPlan_WorkOrderTestAdditional");
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.WorkOrganization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Duty")
                        .HasColumnType("integer");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RepairTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkOrderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RepairTagId");

                    b.HasIndex("OrganizationId", "RepairTagId");

                    b.ToTable("Sn_CrPlan_WorkOrganization");
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.WorkTicket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("FillInTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FinishContent")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FinishTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InfluenceRange")
                        .HasColumnType("text");

                    b.Property<bool?>("IsFine")
                        .HasColumnType("boolean");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("text");

                    b.Property<string>("PaperMaker")
                        .HasColumnType("text");

                    b.Property<string>("PersonInCharge")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PlanFinishTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("PlanStartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("RealFinsihTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("RealStartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RepairLevel")
                        .HasColumnType("text");

                    b.Property<bool?>("SafeGuard")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("SafetyDispatchCheckerId")
                        .HasColumnType("uuid");

                    b.Property<string>("SecurityMeasuresAndAttentions")
                        .HasColumnType("text");

                    b.Property<Guid?>("TechnicalCheckerId")
                        .HasColumnType("uuid");

                    b.Property<string>("WorkContent")
                        .HasColumnType("text");

                    b.Property<string>("WorkPlace")
                        .HasColumnType("text");

                    b.Property<string>("WorkTitle")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SafetyDispatchCheckerId");

                    b.HasIndex("TechnicalCheckerId");

                    b.ToTable("Sn_CrPlan_WorkTicket");
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.WorkTicketRltCooperationUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Completion")
                        .HasColumnType("text");

                    b.Property<string>("CooperateContent")
                        .HasColumnType("text");

                    b.Property<DateTime>("CooperateRealFinishTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CooperateRealStartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CooperateWorkShopId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MainWorkShopId")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid>("WorkTicketId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkTicketId");

                    b.ToTable("Sn_CrPlan_WorkTicketRltCooperationUnit");
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.Worker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Duty")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RepairTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkOrderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RepairTagId");

                    b.ToTable("Sn_CrPlan_Worker");
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.YearMonthAlterRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ARKey")
                        .HasColumnType("uuid");

                    b.Property<string>("ChangeReason")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<int>("PlanType")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Sn_CrPlan_YearMonthAlterRecord");
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.YearMonthPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AR_Key")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Col_1")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_10")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_11")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_12")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_13")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_14")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_15")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_16")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_17")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_18")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_19")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_2")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_20")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_21")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_22")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_23")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_24")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_25")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_26")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_27")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_28")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_29")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_3")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_30")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_31")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_4")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_5")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_6")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_7")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_8")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_9")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<string>("CompiledOrganization")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreateUser")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("DeviceCount")
                        .HasColumnType("integer");

                    b.Property<string>("DeviceName")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("EquipmentLocation")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<bool?>("IsImport")
                        .HasColumnType("boolean");

                    b.Property<int>("Month")
                        .HasColumnType("integer");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<int?>("ParentType")
                        .HasColumnType("integer");

                    b.Property<decimal>("PlanCount")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<int>("PlanType")
                        .HasColumnType("integer");

                    b.Property<string>("Remark")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("RepairContent")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<Guid>("RepairDetailsId")
                        .HasColumnType("uuid");

                    b.Property<string>("RepairGroup")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("RepairMonth")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<Guid?>("RepairTagId")
                        .HasColumnType("uuid");

                    b.Property<int>("RepairType")
                        .HasColumnType("integer");

                    b.Property<Guid>("ResponsibleUnit")
                        .HasColumnType("uuid");

                    b.Property<string>("SkyligetType")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<string>("Times")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<string>("Unit")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("UnitTime")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RepairTagId");

                    b.ToTable("Sn_CrPlan_YearMonthPlan");
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.YearMonthPlanAlter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AR_Key")
                        .HasColumnType("uuid");

                    b.Property<string>("ChangeReason")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<decimal>("Col_1")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_10")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_11")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_12")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_13")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_14")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_15")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_16")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_17")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_18")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_19")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_2")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_20")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_21")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_22")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_23")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_24")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_25")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_26")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_27")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_28")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_29")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_3")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_30")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_31")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_4")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_5")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_6")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_7")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_8")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<decimal>("Col_9")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<string>("CompiledOrganization")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreateUser")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("EquipmentLocation")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<int>("ExecMonth")
                        .HasColumnType("integer");

                    b.Property<int>("ExecYear")
                        .HasColumnType("integer");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int>("IsExec")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsImport")
                        .HasColumnType("boolean");

                    b.Property<decimal>("PlanCount")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uuid");

                    b.Property<int>("PlanType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RepairTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("SkyligetType")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("WorkShop")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("YearMonthAlterRecordId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RepairTagId");

                    b.ToTable("Sn_CrPlan_YearMonthPlanAlter");
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.YearMonthPlanTestItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<float?>("MaxRated")
                        .HasColumnType("real");

                    b.Property<float?>("MinRated")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("PlanYear")
                        .HasColumnType("integer");

                    b.Property<string>("PredictedValue")
                        .HasColumnType("character varying(5000)")
                        .HasMaxLength(5000);

                    b.Property<Guid>("RepairDetailsID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RepairTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("TestContent")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<int>("TestType")
                        .HasColumnType("integer");

                    b.Property<string>("TestUnit")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("RepairTagId");

                    b.ToTable("Sn_CrPlan_YearMonthPlanTestItem");
                });

            modelBuilder.Entity("SnAbp.Emerg.Entities.EmergPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Flow")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(120)")
                        .HasMaxLength(120);

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("character varying(120)")
                        .HasMaxLength(120);

                    b.Property<string>("Summary")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.ToTable("Sn_Emerg_EmergPlan");
                });

            modelBuilder.Entity("SnAbp.Emerg.Entities.EmergPlanProcessRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<Guid>("EmergPlanRecordId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EmergPlanRecordId");

                    b.ToTable("Sn_Emerg_EmergPlanProcessRecord");
                });

            modelBuilder.Entity("SnAbp.Emerg.Entities.EmergPlanRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Flow")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(120)")
                        .HasMaxLength(120);

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("character varying(120)")
                        .HasMaxLength(120);

                    b.Property<string>("Summary")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.ToTable("Sn_Emerg_EmergPlanRecord");
                });

            modelBuilder.Entity("SnAbp.Emerg.Entities.EmergPlanRecordRltComponentCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComponentCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmergPlanRecordId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ComponentCategoryId");

                    b.HasIndex("EmergPlanRecordId");

                    b.ToTable("Sn_Emerg_EmergPlanRecordRltComponentCategory");
                });

            modelBuilder.Entity("SnAbp.Emerg.Entities.EmergPlanRecordRltFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmergPlanRecordId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EmergPlanRecordId");

                    b.HasIndex("FileId");

                    b.ToTable("Sn_Emerg_EmergPlanRecordRltFile");
                });

            modelBuilder.Entity("SnAbp.Emerg.Entities.EmergPlanRecordRltMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmergPlanRecordId")
                        .HasColumnType("uuid");

                    b.Property<int>("Group")
                        .HasColumnType("integer");

                    b.Property<int>("MemberType")
                        .HasColumnType("integer");

                    b.Property<Guid>("MemeberId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EmergPlanRecordId");

                    b.ToTable("Sn_Emerg_EmergPlanRecordRltMember");
                });

            modelBuilder.Entity("SnAbp.Emerg.Entities.EmergPlanRltComponentCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComponentCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmergPlanId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ComponentCategoryId");

                    b.HasIndex("EmergPlanId");

                    b.ToTable("Sn_Emerg_EmergPlanRltComponentCategory");
                });

            modelBuilder.Entity("SnAbp.Emerg.Entities.EmergPlanRltFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmergPlanId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EmergPlanId");

                    b.HasIndex("FileId");

                    b.ToTable("Sn_Emerg_EmergPlanRltFile");
                });

            modelBuilder.Entity("SnAbp.Emerg.Entities.Fault", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abnormal")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("CheckInTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CheckInUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CheckOutTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CheckOutUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DisposePersons")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("DisposeProcess")
                        .HasColumnType("character varying(5000)")
                        .HasMaxLength(5000);

                    b.Property<Guid?>("EmergPlanRecordId")
                        .HasColumnType("uuid");

                    b.Property<string>("EquipmentNames")
                        .HasColumnType("character varying(120)")
                        .HasMaxLength(120);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RailwayId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<Guid>("ReasonTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("Source")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<Guid>("StationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SubmitUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Summary")
                        .HasColumnType("character varying(120)")
                        .HasMaxLength(120);

                    b.Property<float?>("TemperatureMax")
                        .HasColumnType("real");

                    b.Property<float?>("TemperatureMin")
                        .HasColumnType("real");

                    b.Property<string>("WeatherDetail")
                        .HasColumnType("character varying(120)")
                        .HasMaxLength(120);

                    b.HasKey("Id");

                    b.HasIndex("CheckInUserId");

                    b.HasIndex("CheckOutUserId");

                    b.HasIndex("EmergPlanRecordId");

                    b.HasIndex("LevelId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RailwayId");

                    b.HasIndex("ReasonTypeId");

                    b.HasIndex("StationId");

                    b.HasIndex("SubmitUserId");

                    b.ToTable("Sn_Emerg_Fault");
                });

            modelBuilder.Entity("SnAbp.Emerg.Entities.FaultRltComponentCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComponentCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FaultId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ComponentCategoryId");

                    b.HasIndex("FaultId");

                    b.ToTable("Sn_Emerg_FaultRltComponentCategory");
                });

            modelBuilder.Entity("SnAbp.Emerg.Entities.FaultRltEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FaultId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("FaultId");

                    b.ToTable("Sn_Emerg_FaultRltEquipment");
                });

            modelBuilder.Entity("SnAbp.FeatureManagement.FeatureValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("ProviderName")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("Name", "ProviderName", "ProviderKey");

                    b.ToTable("Sn_App_FeatureValues");
                });

            modelBuilder.Entity("SnAbp.File.Entities.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("FolderId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsShare")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Size")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.ToTable("Sn_File_File");
                });

            modelBuilder.Entity("SnAbp.File.Entities.FileRltPermissions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Delete")
                        .HasColumnType("boolean");

                    b.Property<bool>("Edit")
                        .HasColumnType("boolean");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<bool>("Use")
                        .HasColumnType("boolean");

                    b.Property<bool>("View")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.ToTable("Sn_File_FileRltPermissions");
                });

            modelBuilder.Entity("SnAbp.File.Entities.FileRltShare", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Delete")
                        .HasColumnType("boolean");

                    b.Property<bool>("Edit")
                        .HasColumnType("boolean");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<bool>("Use")
                        .HasColumnType("boolean");

                    b.Property<bool>("View")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.ToTable("Sn_File_FileRltShare");
                });

            modelBuilder.Entity("SnAbp.File.Entities.FileRltTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("TagId");

                    b.ToTable("Sn_File_FileRltTag");
                });

            modelBuilder.Entity("SnAbp.File.Entities.FileVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OssId")
                        .HasColumnType("uuid");

                    b.Property<string>("OssUrl")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Size")
                        .HasColumnType("numeric");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("OssId");

                    b.ToTable("Sn_File_FileVersion");
                });

            modelBuilder.Entity("SnAbp.File.Entities.Folder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsShare")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("StaticKey")
                        .HasColumnType("text");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Sn_File_Folder");
                });

            modelBuilder.Entity("SnAbp.File.Entities.FolderRltPermissions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Delete")
                        .HasColumnType("boolean");

                    b.Property<bool>("Edit")
                        .HasColumnType("boolean");

                    b.Property<Guid>("FolderId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<bool>("Use")
                        .HasColumnType("boolean");

                    b.Property<bool>("View")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.ToTable("Sn_File_FolderRltPermissions");
                });

            modelBuilder.Entity("SnAbp.File.Entities.FolderRltShare", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Delete")
                        .HasColumnType("boolean");

                    b.Property<bool>("Edit")
                        .HasColumnType("boolean");

                    b.Property<Guid>("FolderId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<bool>("Use")
                        .HasColumnType("boolean");

                    b.Property<bool>("View")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.ToTable("Sn_File_FolderRltShare");
                });

            modelBuilder.Entity("SnAbp.File.Entities.FolderRltTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FolderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.HasIndex("TagId");

                    b.ToTable("Sn_File_FolderRltTag");
                });

            modelBuilder.Entity("SnAbp.File.Entities.OssServer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessKey")
                        .HasColumnType("text");

                    b.Property<string>("AccessSecret")
                        .HasColumnType("text");

                    b.Property<string>("ConnName")
                        .HasColumnType("text");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean");

                    b.Property<string>("EndPoint")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sn_File_OssServer");
                });

            modelBuilder.Entity("SnAbp.File.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Sn_File_Tag");
                });

            modelBuilder.Entity("SnAbp.FileApprove.Entities.FileApproveRltFlow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileApproveId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<Guid>("WorkFlowId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileApproveId");

                    b.ToTable("Sn_FileApprove_FileApproveRltFlow");
                });

            modelBuilder.Entity("SnAbp.FileApprove.FileApprove", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid?>("WorkflowId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WorkflowTemplateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("WorkflowId");

                    b.HasIndex("WorkflowTemplateId");

                    b.ToTable("Sn_FileApprove_FileApprove");
                });

            modelBuilder.Entity("SnAbp.Identity.DataDictionary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsStatic")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Sn_App_DataDictionary");
                });

            modelBuilder.Entity("SnAbp.Identity.IdentityClaimType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<string>("Description")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Regex")
                        .HasColumnType("character varying(512)")
                        .HasMaxLength(512);

                    b.Property<string>("RegexDescription")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<bool>("Required")
                        .HasColumnType("boolean");

                    b.Property<int>("ValueType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Sn_App_ClaimTypes");
                });

            modelBuilder.Entity("SnAbp.Identity.IdentityRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsDefault")
                        .HasColumnName("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnName("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStatic")
                        .HasColumnName("IsStatic")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName");

                    b.ToTable("Sn_App_Roles");
                });

            modelBuilder.Entity("SnAbp.Identity.IdentityRoleClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue")
                        .HasColumnType("character varying(1024)")
                        .HasMaxLength(1024);

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TenantId")
                        .HasColumnName("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Sn_App_RoleClaims");
                });

            modelBuilder.Entity("SnAbp.Identity.IdentityUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnName("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsChangePassword")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<bool>("LockoutEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("NormalizedEmail")
                        .HasColumnName("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasColumnName("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnName("PasswordHash")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("PhoneNumber")
                        .HasColumnType("character varying(16)")
                        .HasMaxLength(16);

                    b.Property<bool>("PhoneNumberConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("PositionId")
                        .HasColumnType("uuid");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasColumnName("SecurityStamp")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Surname")
                        .HasColumnName("Surname")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<Guid?>("TenantId")
                        .HasColumnName("TenantId")
                        .HasColumnType("uuid");

                    b.Property<bool>("TwoFactorEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("NormalizedEmail");

                    b.HasIndex("NormalizedUserName");

                    b.HasIndex("PositionId");

                    b.HasIndex("UserName");

                    b.ToTable("Sn_App_Users");
                });

            modelBuilder.Entity("SnAbp.Identity.IdentityUserClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue")
                        .HasColumnType("character varying(1024)")
                        .HasMaxLength(1024);

                    b.Property<Guid?>("TenantId")
                        .HasColumnName("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Sn_App_UserClaims");
                });

            modelBuilder.Entity("SnAbp.Identity.IdentityUserLogin", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("character varying(196)")
                        .HasMaxLength(196);

                    b.Property<Guid?>("TenantId")
                        .HasColumnName("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "LoginProvider");

                    b.HasIndex("LoginProvider", "ProviderKey");

                    b.ToTable("Sn_App_UserLogins");
                });

            modelBuilder.Entity("SnAbp.Identity.IdentityUserRltOrganization", b =>
                {
                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationId1")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TenantId")
                        .HasColumnName("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("OrganizationId", "UserId");

                    b.HasIndex("OrganizationId1");

                    b.HasIndex("UserId", "OrganizationId");

                    b.ToTable("Sn_App_UserRltOrganization");
                });

            modelBuilder.Entity("SnAbp.Identity.IdentityUserRltProject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Sn_App_IdentityUserRltProject");
                });

            modelBuilder.Entity("SnAbp.Identity.IdentityUserRltRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TenantId")
                        .HasColumnName("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId", "UserId");

                    b.ToTable("Sn_App_UserRoles");
                });

            modelBuilder.Entity("SnAbp.Identity.IdentityUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TenantId")
                        .HasColumnName("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("Sn_App_UserTokens");
                });

            modelBuilder.Entity("SnAbp.Identity.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CSRGCode")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("Code")
                        .HasColumnType("character varying(79)")
                        .HasMaxLength(79);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRoot")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Nature")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SealImageUrl")
                        .HasColumnType("text");

                    b.Property<Guid?>("TenantId")
                        .HasColumnName("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("ParentId");

                    b.HasIndex("TypeId");

                    b.ToTable("Sn_App_Organization");
                });

            modelBuilder.Entity("SnAbp.Identity.OrganizationRltRole", b =>
                {
                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TenantId")
                        .HasColumnName("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("OrganizationId", "RoleId");

                    b.HasIndex("RoleId", "OrganizationId");

                    b.ToTable("Sn_App_OrganizationRltRoles");
                });

            modelBuilder.Entity("SnAbp.IdentityServer.ApiResources.ApiResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("DisplayName")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sn_App_IdentityServerApiResources");
                });

            modelBuilder.Entity("SnAbp.IdentityServer.ApiResources.ApiResourceClaim", b =>
                {
                    b.Property<Guid>("ApiResourceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("ApiResourceId", "Type");

                    b.ToTable("Sn_App_IdentityServerApiClaims");
                });

            modelBuilder.Entity("SnAbp.IdentityServer.ApiResources.ApiScope", b =>
                {
                    b.Property<Guid>("ApiResourceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Description")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("DisplayName")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("Emphasize")
                        .HasColumnType("boolean");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .HasColumnType("boolean");

                    b.HasKey("ApiResourceId", "Name");

                    b.ToTable("Sn_App_IdentityServerApiScopes");
                });

            modelBuilder.Entity("SnAbp.IdentityServer.ApiResources.ApiScopeClaim", b =>
                {
                    b.Property<Guid>("ApiResourceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("ApiResourceId", "Name", "Type");

                    b.ToTable("Sn_App_IdentityServerApiScopeClaims");
                });

            modelBuilder.Entity("SnAbp.IdentityServer.ApiResources.ApiSecret", b =>
                {
                    b.Property<Guid>("ApiResourceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Value")
                        .HasColumnType("character varying(4000)")
                        .HasMaxLength(4000);

                    b.Property<string>("Description")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ApiResourceId", "Type", "Value");

                    b.ToTable("Sn_App_IdentityServerApiSecrets");
                });

            modelBuilder.Entity("SnAbp.IdentityServer.Clients.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AbsoluteRefreshTokenLifetime")
                        .HasColumnType("integer");

                    b.Property<int>("AccessTokenLifetime")
                        .HasColumnType("integer");

                    b.Property<int>("AccessTokenType")
                        .HasColumnType("integer");

                    b.Property<bool>("AllowAccessTokensViaBrowser")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowOfflineAccess")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowPlainTextPkce")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowRememberConsent")
                        .HasColumnType("boolean");

                    b.Property<bool>("AlwaysIncludeUserClaimsInIdToken")
                        .HasColumnType("boolean");

                    b.Property<bool>("AlwaysSendClientClaims")
                        .HasColumnType("boolean");

                    b.Property<int>("AuthorizationCodeLifetime")
                        .HasColumnType("integer");

                    b.Property<bool>("BackChannelLogoutSessionRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("BackChannelLogoutUri")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("ClientClaimsPrefix")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientName")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientUri")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<int?>("ConsentLifetime")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("DeviceCodeLifetime")
                        .HasColumnType("integer");

                    b.Property<bool>("EnableLocalLogin")
                        .HasColumnType("boolean");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("FrontChannelLogoutSessionRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("FrontChannelLogoutUri")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.Property<int>("IdentityTokenLifetime")
                        .HasColumnType("integer");

                    b.Property<bool>("IncludeJwtId")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("LogoUri")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("PairWiseSubjectSalt")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ProtocolType")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int>("RefreshTokenExpiration")
                        .HasColumnType("integer");

                    b.Property<int>("RefreshTokenUsage")
                        .HasColumnType("integer");

                    b.Property<bool>("RequireClientSecret")
                        .HasColumnType("boolean");

                    b.Property<bool>("RequireConsent")
                        .HasColumnType("boolean");

                    b.Property<bool>("RequirePkce")
                        .HasColumnType("boolean");

                    b.Property<int>("SlidingRefreshTokenLifetime")
                        .HasColumnType("integer");

                    b.Property<bool>("UpdateAccessTokenClaimsOnRefresh")
                        .HasColumnType("boolean");

                    b.Property<string>("UserCodeType")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("UserSsoLifetime")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Sn_App_IdentityServerClients");
                });

            modelBuilder.Entity("SnAbp.IdentityServer.Clients.ClientClaim", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Value")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.HasKey("ClientId", "Type", "Value");

                    b.ToTable("Sn_App_IdentityServerClientClaims");
                });

            modelBuilder.Entity("SnAbp.IdentityServer.Clients.ClientCorsOrigin", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Origin")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.HasKey("ClientId", "Origin");

                    b.ToTable("Sn_App_IdentityServerClientCorsOrigins");
                });

            modelBuilder.Entity("SnAbp.IdentityServer.Clients.ClientGrantType", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("GrantType")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.HasKey("ClientId", "GrantType");

                    b.ToTable("Sn_App_IdentityServerClientGrantTypes");
                });

            modelBuilder.Entity("SnAbp.IdentityServer.Clients.ClientIdPRestriction", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Provider")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("ClientId", "Provider");

                    b.ToTable("Sn_App_IdentityServerClientIdPRestrictions");
                });

            modelBuilder.Entity("SnAbp.IdentityServer.Clients.ClientPostLogoutRedirectUri", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("PostLogoutRedirectUri")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.HasKey("ClientId", "PostLogoutRedirectUri");

                    b.ToTable("Sn_App_IdentityServerClientPostLogoutRedirectUris");
                });

            modelBuilder.Entity("SnAbp.IdentityServer.Clients.ClientProperty", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Key")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.HasKey("ClientId", "Key");

                    b.ToTable("Sn_App_IdentityServerClientProperties");
                });

            modelBuilder.Entity("SnAbp.IdentityServer.Clients.ClientRedirectUri", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("RedirectUri")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.HasKey("ClientId", "RedirectUri");

                    b.ToTable("Sn_App_IdentityServerClientRedirectUris");
                });

            modelBuilder.Entity("SnAbp.IdentityServer.Clients.ClientScope", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Scope")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("ClientId", "Scope");

                    b.ToTable("Sn_App_IdentityServerClientScopes");
                });

            modelBuilder.Entity("SnAbp.IdentityServer.Clients.ClientSecret", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Value")
                        .HasColumnType("character varying(4000)")
                        .HasMaxLength(4000);

                    b.Property<string>("Description")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ClientId", "Type", "Value");

                    b.ToTable("Sn_App_IdentityServerClientSecrets");
                });

            modelBuilder.Entity("SnAbp.IdentityServer.Devices.DeviceFlowCodes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("character varying(50000)")
                        .HasMaxLength(50000);

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<string>("SubjectId")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.HasIndex("UserCode")
                        .IsUnique();

                    b.ToTable("Sn_App_IdentityServerDeviceFlowCodes");
                });

            modelBuilder.Entity("SnAbp.IdentityServer.Grants.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("character varying(50000)")
                        .HasMaxLength(50000);

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("SubjectId")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.ToTable("Sn_App_IdentityServerPersistedGrants");
                });

            modelBuilder.Entity("SnAbp.IdentityServer.IdentityResources.IdentityClaim", b =>
                {
                    b.Property<Guid>("IdentityResourceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("IdentityResourceId", "Type");

                    b.ToTable("Sn_App_IdentityServerIdentityClaims");
                });

            modelBuilder.Entity("SnAbp.IdentityServer.IdentityResources.IdentityResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("DisplayName")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("Emphasize")
                        .HasColumnType("boolean");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Sn_App_IdentityServerIdentityResources");
                });

            modelBuilder.Entity("SnAbp.Material.Entities.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Sn_Material_Contract");
                });

            modelBuilder.Entity("SnAbp.Material.Entities.ContractRltFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("FileId");

                    b.ToTable("Sn_Material_ContractRltFile");
                });

            modelBuilder.Entity("SnAbp.Material.Entities.EntryRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PartitionId");

                    b.ToTable("Sn_Material_EntryRecord");
                });

            modelBuilder.Entity("SnAbp.Material.Entities.EntryRecordRltFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntryRecordId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EntryRecordId");

                    b.HasIndex("FileId");

                    b.ToTable("Sn_Material_EntryRecordRltFile");
                });

            modelBuilder.Entity("SnAbp.Material.Entities.EntryRecordRltMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Count")
                        .HasColumnType("numeric");

                    b.Property<Guid>("EntryRecordId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InventoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid");

                    b.Property<string>("Price")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("EntryRecordId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Sn_Material_EntryRecordRltMaterial");
                });

            modelBuilder.Entity("SnAbp.Material.Entities.EntryRecordRltQRCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EntryRecordId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("QRCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntryRecordId");

                    b.ToTable("Sn_Material_EntryRecordRltQRCode");
                });

            modelBuilder.Entity("SnAbp.Material.Entities.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("BatchNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EntryTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PartitionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Price")
                        .HasColumnType("text");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("PartitionId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Sn_Material_Inventory");
                });

            modelBuilder.Entity("SnAbp.Material.Entities.MaterialAcceptance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ReceptionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<Guid>("TestingOrganizationId")
                        .HasColumnType("uuid");

                    b.Property<int>("TestingStatus")
                        .HasColumnType("integer");

                    b.Property<int>("TestingType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("TestingOrganizationId");

                    b.ToTable("Sn_Material_MaterialAcceptance");
                });

            modelBuilder.Entity("SnAbp.Material.Entities.MaterialAcceptanceRltFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialAcceptanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("MaterialAcceptanceId");

                    b.ToTable("Sn_Material_MaterialAcceptanceRltFile");
                });

            modelBuilder.Entity("SnAbp.Material.Entities.MaterialAcceptanceRltMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialAcceptanceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("TestState")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MaterialAcceptanceId");

                    b.HasIndex("MaterialId");

                    b.ToTable("Sn_Material_MaterialAcceptanceRltMaterial");
                });

            modelBuilder.Entity("SnAbp.Material.Entities.MaterialAcceptanceRltPurchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialAcceptanceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PurchaseListId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MaterialAcceptanceId");

                    b.HasIndex("PurchaseListId");

                    b.ToTable("Sn_Material_MaterialAcceptanceRltPurchase");
                });

            modelBuilder.Entity("SnAbp.Material.Entities.MaterialAcceptanceRltQRCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialAcceptanceId")
                        .HasColumnType("uuid");

                    b.Property<string>("QRCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MaterialAcceptanceId");

                    b.ToTable("Sn_Material_MaterialAcceptanceRltQRCode");
                });

            modelBuilder.Entity("SnAbp.Material.Entities.MaterialOfBill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConstructionTeam")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("Sn_Material_MaterialOfBill");
                });

            modelBuilder.Entity("SnAbp.Material.Entities.MaterialOfBillRltAccessory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialOfBillId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("MaterialOfBillId");

                    b.ToTable("Sn_Material_MaterialOfBillRltAccessory");
                });

            modelBuilder.Entity("SnAbp.Material.Entities.MaterialOfBillRltMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InventoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialOfBillId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("count")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.HasIndex("MaterialOfBillId");

                    b.ToTable("Sn_Material_MaterialOfBillRltMaterial");
                });

            modelBuilder.Entity("SnAbp.Material.Entities.OutRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PartitionId");

                    b.ToTable("Sn_Material_OutRecord");
                });

            modelBuilder.Entity("SnAbp.Material.Entities.OutRecordRltFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OutRecordId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("OutRecordId");

                    b.ToTable("Sn_Material_OutRecordRltFile");
                });

            modelBuilder.Entity("SnAbp.Material.Entities.OutRecordRltMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Count")
                        .HasColumnType("numeric");

                    b.Property<Guid>("InventoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OutRecordId")
                        .HasColumnType("uuid");

                    b.Property<string>("Price")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("OutRecordId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Sn_Material_OutRecordRltMaterial");
                });

            modelBuilder.Entity("SnAbp.Material.Entities.OutRecordRltQRCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OutRecordId")
                        .HasColumnType("uuid");

                    b.Property<string>("QRCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OutRecordId");

                    b.ToTable("Sn_Material_OutRecordRltQRCode");
                });

            modelBuilder.Entity("SnAbp.Material.Entities.Partition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<Guid?>("TopId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<decimal>("X")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Y")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("ParentId");

                    b.ToTable("Sn_Material_Partition");
                });

            modelBuilder.Entity("SnAbp.Material.Entities.PurchaseList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("PlanTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<bool>("Submit")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid?>("WorkflowId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WorkflowTemplateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("WorkflowId");

                    b.HasIndex("WorkflowTemplateId");

                    b.ToTable("Sn_Material_PurchaseList");
                });

            modelBuilder.Entity("SnAbp.Material.Entities.PurchaseListRltFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PurchaseListId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("PurchaseListId");

                    b.ToTable("Sn_Material_PurchaseListRltFile");
                });

            modelBuilder.Entity("SnAbp.Material.Entities.PurchaseListRltFlow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PurchaseListId")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<Guid>("WorkFlowId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseListId");

                    b.ToTable("Sn_Material_PurchaseListRltFlow");
                });

            modelBuilder.Entity("SnAbp.Material.Entities.PurchaseListRltMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<Guid>("PurchaseListId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("PurchaseListId");

                    b.ToTable("Sn_Material_PurchaseListRltMaterial");
                });

            modelBuilder.Entity("SnAbp.Material.Entities.PurchaseListRltPurchasePlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PurchaseListId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PurchasePlanId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseListId");

                    b.HasIndex("PurchasePlanId");

                    b.ToTable("Sn_Material_PurchaseListRltPurchasePlan");
                });

            modelBuilder.Entity("SnAbp.Material.Entities.PurchasePlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("PlanTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<bool>("Submit")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("WorkflowId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WorkflowTemplateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("WorkflowId");

                    b.HasIndex("WorkflowTemplateId");

                    b.ToTable("Sn_Material_PurchasePlan");
                });

            modelBuilder.Entity("SnAbp.Material.Entities.PurchasePlanRltFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PurchasePlanId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("PurchasePlanId");

                    b.ToTable("Sn_Material_PurchasePlanRltFile");
                });

            modelBuilder.Entity("SnAbp.Material.Entities.PurchasePlanRltFlow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PurchasePlanId")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<Guid>("WorkFlowId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PurchasePlanId");

                    b.ToTable("Sn_Material_PurchasePlanRltFlow");
                });

            modelBuilder.Entity("SnAbp.Material.Entities.PurchasePlanRltMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("PurchasePlanId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("PurchasePlanId");

                    b.ToTable("Sn_Material_PurchasePlanRltMaterial");
                });

            modelBuilder.Entity("SnAbp.Material.Entities.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountOpeningUnit")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Address")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("BankAccount")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("BusinessScope")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Code")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LegalPerson")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("OpeningBank")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Principal")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<int>("Property")
                        .HasColumnType("integer");

                    b.Property<string>("RegisteredAssets")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Remark")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("TIN")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Telephone")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Sn_Material_Supplier");
                });

            modelBuilder.Entity("SnAbp.Material.Entities.SupplierRltAccessory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Sn_Material_SupplierRltAccessory");
                });

            modelBuilder.Entity("SnAbp.Material.Entities.SupplierRltContacts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LandlinePhone")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("QQ")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Telephone")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("Sn_Material_SupplierRltContacts");
                });

            modelBuilder.Entity("SnAbp.Message.Bpm.Entities.BpmRltMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<int>("Group")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Process")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ProcessorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SponsorId")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkflowId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProcessorId");

                    b.HasIndex("SponsorId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkflowId");

                    b.ToTable("Sn_Message_Bpm_BpmRltMessage");
                });

            modelBuilder.Entity("SnAbp.Message.Notice.Entities.Notice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Process")
                        .HasColumnType("boolean");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Sn_Message_Notice_Notice");
                });

            modelBuilder.Entity("SnAbp.Oa.Entities.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abstract")
                        .HasColumnType("text");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("AmountWords")
                        .HasColumnType("text");

                    b.Property<decimal>("Budge")
                        .HasColumnType("numeric");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("HostDepartmentId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("OtherPartInfo")
                        .HasColumnType("text");

                    b.Property<string>("PartyA")
                        .HasColumnType("text");

                    b.Property<string>("PartyB")
                        .HasColumnType("text");

                    b.Property<string>("PartyC")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SignTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("TypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UnderDepartmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UndertakerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("HostDepartmentId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UnderDepartmentId");

                    b.HasIndex("UndertakerId");

                    b.ToTable("Sn_Oa_Contract");
                });

            modelBuilder.Entity("SnAbp.Oa.Entities.ContractRltFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("FileId");

                    b.ToTable("Sn_Oa_ContractRltFile");
                });

            modelBuilder.Entity("SnAbp.Oa.Entities.DutySchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Sn_Oa_DutySchedule");
                });

            modelBuilder.Entity("SnAbp.Oa.Entities.DutyScheduleRltUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DutyScheduleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DutyScheduleId");

                    b.HasIndex("UserId");

                    b.ToTable("Sn_Oa_DutyScheduleRltUser");
                });

            modelBuilder.Entity("SnAbp.Oa.Entities.Seal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("Sn_Oa_Seal");
                });

            modelBuilder.Entity("SnAbp.Oa.Entities.SealRltMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<int>("MemberType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SealId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SealId");

                    b.ToTable("Sn_Oa_SealRltMember");
                });

            modelBuilder.Entity("SnAbp.PermissionManagement.PermissionGrant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<Guid>("ProviderGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<Guid?>("TenantId")
                        .HasColumnName("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Name", "ProviderName", "ProviderKey");

                    b.ToTable("Sn_App_PermissionGrants");
                });

            modelBuilder.Entity("SnAbp.Problem.Entities.Problem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Sn_Problem_Problem");
                });

            modelBuilder.Entity("SnAbp.Problem.Entities.ProblemCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Sn_Problem_ProblemCategory");
                });

            modelBuilder.Entity("SnAbp.Problem.Entities.ProblemRltProblemCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProblemCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProblemId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProblemCategoryId");

                    b.HasIndex("ProblemId");

                    b.ToTable("Sn_Problem_ProblemRltProblemCategory");
                });

            modelBuilder.Entity("SnAbp.Project.Entities.Archives", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ArchivesCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("ArchivesFilesCode")
                        .HasColumnType("text");

                    b.Property<Guid>("BooksClassificationId")
                        .HasColumnType("uuid");

                    b.Property<int>("Copies")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileCode")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<int>("Page")
                        .HasColumnType("integer");

                    b.Property<string>("ProjectCode")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<int>("Security")
                        .HasColumnType("integer");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.Property<string>("Year")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ArchivesCategoryId");

                    b.HasIndex("BooksClassificationId");

                    b.ToTable("Sn_Project_Archives");
                });

            modelBuilder.Entity("SnAbp.Project.Entities.ArchivesCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsEncrypt")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Sn_Project_ArchivesCategory");
                });

            modelBuilder.Entity("SnAbp.Project.Entities.BooksClassification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Sn_Project_BooksClassification");
                });

            modelBuilder.Entity("SnAbp.Project.Entities.Dossier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ArchivesId")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("FileCategoryId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<int>("Page")
                        .HasColumnType("integer");

                    b.Property<string>("PersonName")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ArchivesId");

                    b.HasIndex("FileCategoryId");

                    b.ToTable("Sn_Project_Dossier");
                });

            modelBuilder.Entity("SnAbp.Project.Entities.DossierCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Sn_Project_DossierCategory");
                });

            modelBuilder.Entity("SnAbp.Project.Entities.DossierRltFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DossierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DossierId");

                    b.HasIndex("FileId");

                    b.ToTable("Sn_Project_DossierRltFile");
                });

            modelBuilder.Entity("SnAbp.Project.Entities.FileCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Sn_Project_FileCategory");
                });

            modelBuilder.Entity("SnAbp.Project.Entities.ProjectRltContract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ContractId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Sn_Project_ProjectRltContract");
                });

            modelBuilder.Entity("SnAbp.Project.Entities.ProjectRltFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Sn_Project_ProjectRltFile");
                });

            modelBuilder.Entity("SnAbp.Project.Entities.ProjectRltMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Sn_Project_ProjectRltMember");
                });

            modelBuilder.Entity("SnAbp.Project.Entities.ProjectRltUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UnitId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UnitId");

                    b.ToTable("Sn_Project_ProjectRltUnit");
                });

            modelBuilder.Entity("SnAbp.Project.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Area")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<decimal>("ConstructionPeriod")
                        .HasColumnType("numeric");

                    b.Property<string>("Cost")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DetailAddress")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Lat")
                        .HasColumnType("text");

                    b.Property<string>("Lng")
                        .HasColumnType("text");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PlannedEndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("PlannedStartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("Progress")
                        .HasColumnType("numeric");

                    b.Property<int>("QualityLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("Scale")
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TypeId");

                    b.ToTable("Sn_Project_Project");
                });

            modelBuilder.Entity("SnAbp.Project.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BankAccount")
                        .HasColumnType("text");

                    b.Property<string>("BankCode")
                        .HasColumnType("text");

                    b.Property<string>("BankName")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Leader")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Telephone")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Sn_Project_Unit");
                });

            modelBuilder.Entity("SnAbp.Quality.Entities.QualityProblem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CheckTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CheckUnitId")
                        .HasColumnType("uuid");

                    b.Property<string>("CheckUnitName")
                        .HasColumnType("text");

                    b.Property<Guid>("CheckerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LimitTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProfessionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ResponsibleOrganizationId")
                        .HasColumnType("uuid");

                    b.Property<string>("ResponsibleUnit")
                        .HasColumnType("text");

                    b.Property<Guid?>("ResponsibleUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<string>("Suggestion")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid?>("VerifierId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CheckUnitId");

                    b.HasIndex("CheckerId");

                    b.HasIndex("ProfessionId");

                    b.HasIndex("ResponsibleOrganizationId");

                    b.HasIndex("ResponsibleUserId");

                    b.HasIndex("VerifierId");

                    b.ToTable("Sn_Quality_QualityProblem");
                });

            modelBuilder.Entity("SnAbp.Quality.Entities.QualityProblemLibrary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Measures")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProfessionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionId");

                    b.ToTable("Sn_Quality_QualityProblemLibrary");
                });

            modelBuilder.Entity("SnAbp.Quality.Entities.QualityProblemLibraryRltScop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("QualityProblemLibraryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ScopId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QualityProblemLibraryId");

                    b.HasIndex("ScopId");

                    b.ToTable("Sn_Quality_QualityProblemLibraryRltScop");
                });

            modelBuilder.Entity("SnAbp.Quality.Entities.QualityProblemRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QualityProblemId")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QualityProblemId");

                    b.HasIndex("UserId");

                    b.ToTable("Sn_Quality_QualityProblemRecord");
                });

            modelBuilder.Entity("SnAbp.Quality.Entities.QualityProblemRecordRltFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QualityProblemRecordId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("QualityProblemRecordId");

                    b.ToTable("Sn_Quality_QualityProblemRecordRleFile");
                });

            modelBuilder.Entity("SnAbp.Quality.Entities.QualityProblemRltCcUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CcUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QualityProblemId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CcUserId");

                    b.HasIndex("QualityProblemId");

                    b.ToTable("Sn_Quality_QualityProblemRltCcUser");
                });

            modelBuilder.Entity("SnAbp.Quality.Entities.QualityProblemRltEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QualityProblemId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("QualityProblemId");

                    b.ToTable("Sn_Quality_QualityProblemRltEquipment");
                });

            modelBuilder.Entity("SnAbp.Quality.Entities.QualityProblemRltFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QualityProblemId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("QualityProblemId");

                    b.ToTable("Sn_Quality_QualityProblemRltFile");
                });

            modelBuilder.Entity("SnAbp.Regulation.Entities.Institution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abstract")
                        .HasColumnType("text");

                    b.Property<int>("Classify")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EffectiveTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ExpireTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Header")
                        .HasColumnType("text");

                    b.Property<bool>("IsApprove")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublish")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<int>("NewsClassify")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Sn_Regulation_Institution");
                });

            modelBuilder.Entity("SnAbp.Regulation.Entities.InstitutionRltAuthority", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDownLoad")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsView")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.ToTable("Sn_Regulation_InstitutionRltAuthority");
                });

            modelBuilder.Entity("SnAbp.Regulation.Entities.InstitutionRltEdition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abstract")
                        .HasColumnType("text");

                    b.Property<int>("Classify")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EffectiveTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ExpireTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Header")
                        .HasColumnType("text");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<decimal>("Version")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.ToTable("Sn_Regulation_InstitutionRltEdition");
                });

            modelBuilder.Entity("SnAbp.Regulation.Entities.InstitutionRltFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("InstitutionId");

                    b.ToTable("Sn_Regulation_InstitutionRltFile");
                });

            modelBuilder.Entity("SnAbp.Regulation.Entities.InstitutionRltFlow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApproveState")
                        .HasColumnType("text");

                    b.Property<DateTime>("ApproveTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SealId")
                        .HasColumnType("uuid");

                    b.Property<string>("Suggestion")
                        .HasColumnType("text");

                    b.Property<Guid>("WorkFlowId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("InstitutionId")
                        .IsUnique();

                    b.HasIndex("SealId");

                    b.HasIndex("WorkFlowId");

                    b.ToTable("Sn_Regulation_InstitutionRltFlow");
                });

            modelBuilder.Entity("SnAbp.Regulation.Entities.InstitutionRltLabel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LabelId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("LabelId");

                    b.ToTable("Sn_Regulation_InstitutionRltLabel");
                });

            modelBuilder.Entity("SnAbp.Regulation.Entities.Label", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Citation")
                        .HasColumnType("integer");

                    b.Property<string>("Classify")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sn_Regulation_Label");
                });

            modelBuilder.Entity("SnAbp.Report.Entities.ReportRltFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("ReportId");

                    b.ToTable("Sn_Report_ReportRltFile");
                });

            modelBuilder.Entity("SnAbp.Report.Entities.ReportRltUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.HasIndex("UserId");

                    b.ToTable("Sn_Report_ReportRltUser");
                });

            modelBuilder.Entity("SnAbp.Report.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Plan")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Summary")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("WorkRecord")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Sn_Report_Report");
                });

            modelBuilder.Entity("SnAbp.Resource.Entities.CableCore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CableId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Rremark")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CableId");

                    b.ToTable("Sn_Resource_CableCore");
                });

            modelBuilder.Entity("SnAbp.Resource.Entities.CableExtend", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<int?>("LayType")
                        .HasColumnType("integer");

                    b.Property<float?>("Length")
                        .HasColumnType("real");

                    b.Property<int?>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<int?>("RailwayNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("SpareNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Sn_Resource_CableExtend");
                });

            modelBuilder.Entity("SnAbp.Resource.Entities.CableLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CableId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Direction")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Positions")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CableId");

                    b.ToTable("Sn_Resource_CableLocation");
                });

            modelBuilder.Entity("SnAbp.Resource.Entities.ComponentRltQRCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GenerateEquipmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InstallationEquipmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("QRCode")
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GenerateEquipmentId");

                    b.HasIndex("InstallationEquipmentId");

                    b.ToTable("Sn_Resource_ComponentRltQRCode");
                });

            modelBuilder.Entity("SnAbp.Resource.Entities.ComponentTrackRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComponentRltQRCodeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<int>("NodeType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("TrackingId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ComponentRltQRCodeId");

                    b.HasIndex("UserId");

                    b.ToTable("Sn_Resource_ComponentTrackRecord");
                });

            modelBuilder.Entity("SnAbp.Resource.Entities.Equipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CSRGCode")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<Guid?>("CableExtendId")
                        .HasColumnType("uuid");

                    b.Property<int>("CheckState")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<Guid?>("ComponentCategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("EndInstallationSiteId")
                        .HasColumnType("uuid");

                    b.Property<string>("GisData")
                        .HasColumnType("text");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InstallationSiteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ManufacturerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<string>("StandardName")
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<Guid?>("StoreEquipmentId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UseDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CableExtendId");

                    b.HasIndex("ComponentCategoryId");

                    b.HasIndex("EndInstallationSiteId");

                    b.HasIndex("GroupId");

                    b.HasIndex("InstallationSiteId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ParentId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("StoreEquipmentId");

                    b.ToTable("Sn_Resource_Equipment");
                });

            modelBuilder.Entity("SnAbp.Resource.Entities.EquipmentGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ParentId");

                    b.ToTable("Sn_Resource_EquipmentGroup");
                });

            modelBuilder.Entity("SnAbp.Resource.Entities.EquipmentProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MVDCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MVDPropertyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("MVDCategoryId");

                    b.HasIndex("MVDPropertyId");

                    b.ToTable("Sn_Resource_EquipmentProperty");
                });

            modelBuilder.Entity("SnAbp.Resource.Entities.EquipmentRltFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("FileId");

                    b.ToTable("Sn_Resource_EquipmentRltFile");
                });

            modelBuilder.Entity("SnAbp.Resource.Entities.EquipmentRltOrganization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Sn_Resource_EquipmentRltOrganization");
                });

            modelBuilder.Entity("SnAbp.Resource.Entities.EquipmentServiceRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StoreEquipmentId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("StoreEquipmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Sn_Resource_EquipmentServiceRecord");
                });

            modelBuilder.Entity("SnAbp.Resource.Entities.StoreEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<Guid>("ComponentCategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ManufactureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ManufacturerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("ProductCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<Guid?>("StoreHouseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ComponentCategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("StoreHouseId");

                    b.ToTable("Sn_Resource_StoreEquipment");
                });

            modelBuilder.Entity("SnAbp.Resource.Entities.StoreEquipmentTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("text");

                    b.Property<bool>("Passed")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TesterId")
                        .HasColumnType("uuid");

                    b.Property<string>("TesterName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TesterId");

                    b.ToTable("Sn_Resource_StoreEquipmentTest");
                });

            modelBuilder.Entity("SnAbp.Resource.Entities.StoreEquipmentTestRltEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("StoreEquipmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StoreEquipmentTestId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StoreEquipmentId");

                    b.HasIndex("StoreEquipmentTestId");

                    b.ToTable("Sn_Resource_StoreEquipmentTestRltEquipment");
                });

            modelBuilder.Entity("SnAbp.Resource.Entities.StoreEquipmentTransfer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<Guid>("StoreHouseId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StoreHouseId");

                    b.HasIndex("UserId");

                    b.ToTable("Sn_Resource_StoreEquipmentTransfer");
                });

            modelBuilder.Entity("SnAbp.Resource.Entities.StoreEquipmentTransferRltEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("StoreEquipmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StoreEquipmentTransferId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StoreEquipmentId");

                    b.HasIndex("StoreEquipmentTransferId")
                        .HasName("IX_Sn_Resource_StoreEquipmentTransferRltEquipment_StoreEquipm~1");

                    b.ToTable("Sn_Resource_StoreEquipmentTransferRltEquipment");
                });

            modelBuilder.Entity("SnAbp.Resource.Entities.StoreHouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int?>("AreaId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ParentId");

                    b.ToTable("Sn_Resource_StoreHouse");
                });

            modelBuilder.Entity("SnAbp.Resource.Entities.Terminal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uuid")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.ToTable("Sn_Resource_Terminal");
                });

            modelBuilder.Entity("SnAbp.Resource.Entities.TerminalBusinessPath", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Sn_Resource_TerminalBusinessPath");
                });

            modelBuilder.Entity("SnAbp.Resource.Entities.TerminalBusinessPathNode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CableCoreId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TerminalBusinessPathId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TerminalId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CableCoreId");

                    b.HasIndex("TerminalBusinessPathId");

                    b.HasIndex("TerminalId");

                    b.ToTable("Sn_Resource_TerminalBusinessPathNode");
                });

            modelBuilder.Entity("SnAbp.Resource.Entities.TerminalLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BusinessFunction")
                        .HasColumnType("text");

                    b.Property<Guid?>("CableCoreId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TerminalAId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TerminalBId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CableCoreId");

                    b.HasIndex("TerminalAId");

                    b.HasIndex("TerminalBId");

                    b.ToTable("Sn_Resource_TerminalLink");
                });

            modelBuilder.Entity("SnAbp.Safe.Entities.SafeProblem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CheckTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CheckUnitId")
                        .HasColumnType("uuid");

                    b.Property<string>("CheckUnitName")
                        .HasColumnType("text");

                    b.Property<Guid>("CheckerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LimitTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProfessionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ResponsibleOrganizationId")
                        .HasColumnType("uuid");

                    b.Property<string>("ResponsibleUnit")
                        .HasColumnType("text");

                    b.Property<Guid?>("ResponsibleUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("RiskLevel")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<string>("Suggestion")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("VerifierId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CheckUnitId");

                    b.HasIndex("CheckerId");

                    b.HasIndex("ProfessionId");

                    b.HasIndex("ResponsibleOrganizationId");

                    b.HasIndex("ResponsibleUserId");

                    b.HasIndex("TypeId");

                    b.HasIndex("VerifierId");

                    b.ToTable("Sn_Safe_SafeProblem");
                });

            modelBuilder.Entity("SnAbp.Safe.Entities.SafeProblemLibrary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<Guid>("EventTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Measures")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProfessionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<int>("RiskLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventTypeId");

                    b.HasIndex("ProfessionId");

                    b.ToTable("Sn_Safe_SafeProblemLibrary");
                });

            modelBuilder.Entity("SnAbp.Safe.Entities.SafeProblemLibraryRltScop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("SafeProblemLibraryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ScopId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SafeProblemLibraryId");

                    b.HasIndex("ScopId");

                    b.ToTable("Sn_Safe_SafeProblemLibraryRltScop");
                });

            modelBuilder.Entity("SnAbp.Safe.Entities.SafeProblemRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SafeProblemId")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SafeProblemId");

                    b.HasIndex("UserId");

                    b.ToTable("Sn_Safe_SafeProblemRecord");
                });

            modelBuilder.Entity("SnAbp.Safe.Entities.SafeProblemRecordRltFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SafeProblemRecordId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("SafeProblemRecordId");

                    b.ToTable("Sn_Safe_SafeProblemRecordRleFile");
                });

            modelBuilder.Entity("SnAbp.Safe.Entities.SafeProblemRltCcUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CcUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SafeProblemId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CcUserId");

                    b.HasIndex("SafeProblemId");

                    b.ToTable("Sn_Safe_SafeProblemRltCcUser");
                });

            modelBuilder.Entity("SnAbp.Safe.Entities.SafeProblemRltEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SafeProblemId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("SafeProblemId");

                    b.ToTable("Sn_Safe_SafeProblemRltEquipment");
                });

            modelBuilder.Entity("SnAbp.Safe.Entities.SafeProblemRltFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SafeProblemId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("SafeProblemId");

                    b.ToTable("Sn_Safe_SafeProblemRltFile");
                });

            modelBuilder.Entity("SnAbp.Safe.Entities.SafeSpeechVideo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Site")
                        .HasColumnType("text");

                    b.Property<Guid?>("VideoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VideoId");

                    b.ToTable("Sn_Safe_SafeSpeechVideo");
                });

            modelBuilder.Entity("SnAbp.SettingManagement.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("ProviderName")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("character varying(2048)")
                        .HasMaxLength(2048);

                    b.HasKey("Id");

                    b.HasIndex("Name", "ProviderName", "ProviderKey");

                    b.ToTable("Sn_App_Settings");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.BasePrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AreaId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ComputerCodeId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("StandardCodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StandardId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("ComputerCodeId");

                    b.HasIndex("StandardCodeId");

                    b.HasIndex("StandardId");

                    b.ToTable("Sn_StdBasic_BasePrice");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.Block", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BlockCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("TwoDPreview")
                        .HasColumnType("text");

                    b.Property<string>("TwoDSymbol")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BlockCategoryId");

                    b.ToTable("Sn_StdBasic_Block");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.BlockCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Sn_StdBasic_BlockCategory");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.ComponentCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtendCode")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ExtendName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("LevelName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Sn_StdBasic_ComponentCategory");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.ComponentCategoryRltMVDProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ComponentCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MVDPropertyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ComponentCategoryId");

                    b.HasIndex("MVDPropertyId");

                    b.ToTable("Sn_StdBasic_ComponentCategoryRltMVDProperty");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.ComponentCategoryRltMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComponentCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComputerCodeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ComponentCategoryId");

                    b.HasIndex("ComputerCodeId");

                    b.ToTable("Sn_StdBasic_ComponentCategoryRltMaterial");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.ComponentCategoryRltProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ComponentCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductionCategoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ComponentCategoryId");

                    b.HasIndex("ProductionCategoryId");

                    b.ToTable("Sn_StdBasic_ComponentCategoryRltProductCategory");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.ComponentCategoryRltQuota", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComponentCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuotaId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ComponentCategoryId");

                    b.HasIndex("QuotaId");

                    b.ToTable("Sn_StdBasic_ComponentCategoryRltQuota");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.ComputerCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Sn_StdBasic_ComputerCode");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.EquipmentControlType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ManufacturerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("TypeGroup")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Sn_StdBasic_EquipmentControlType");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.IndividualProject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<Guid>("SpecialtyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("Sn_StdBasic_IndividualProject");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.InfluenceRange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifyTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RepairLevel")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TagId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.ToTable("Sn_StdBasic_InfluenceRange");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.MVDCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sn_StdBasic_MVDCategory");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.MVDProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsInstance")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MVDCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("MVDCategoryId");

                    b.ToTable("Sn_StdBasic_MVDProperty");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.Manufacturer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("CSRGCode")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Code")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Introduction")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Principal")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Telephone")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Type")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Sn_StdBasic_Manufacturer");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.Model", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CSRGCode")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Code")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<Guid?>("ComponentCategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ManufacturerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<Guid?>("ProductCategoryId")
                        .HasColumnType("uuid");

                    b.Property<float?>("ServiceLife")
                        .HasColumnType("real");

                    b.Property<int?>("ServiceLifeUnit")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ComponentCategoryId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Sn_StdBasic_Model");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.ModelFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DetailLevel")
                        .HasColumnType("integer");

                    b.Property<Guid?>("FamilyFileId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModelId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ThumbId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FamilyFileId");

                    b.HasIndex("ModelId");

                    b.HasIndex("ThumbId");

                    b.ToTable("Sn_StdBasic_ModelFile");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.ModelRltBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BlockId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModelId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.HasIndex("ModelId");

                    b.ToTable("Sn_StdBasic_ModelRltBlock");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.ModelRltMVDProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MVDPropertyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModelId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("MVDPropertyId");

                    b.HasIndex("ModelId");

                    b.ToTable("Sn_StdBasic_ModelRltMVDProperty");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.ModelRltModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModelId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.HasIndex("ParentId");

                    b.ToTable("Sn_StdBasic_ModelRltModel");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.ModelTerminal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<Guid>("ProductCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Sn_StdBasic_ModelTerminal");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.ProcessTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<decimal>("Duration")
                        .HasColumnType("numeric");

                    b.Property<int>("DurationUnit")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PrepositionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Sn_StdBasic_ProcessTemplate");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtendCode")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ExtendName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("LevelName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("TerminalSymbol")
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Sn_StdBasic_ProductCategory");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.ProductCategoryRltMVDProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MVDPropertyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("MVDPropertyId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Sn_StdBasic_ProductCategoryRltMVDProperty");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.ProductCategoryRltMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComputerCodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductCategoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ComputerCodeId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Sn_StdBasic_ProductCategoryRltMaterial");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.ProductCategoryRltQuota", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductionCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuotaId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("QuotaId");

                    b.ToTable("Sn_StdBasic_ProductCategoryRltQuota");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.ProjectItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sn_StdBasic_ProjectItem");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.ProjectItemRltComponentCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComponentCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectItemId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ComponentCategoryId");

                    b.HasIndex("ProjectItemId");

                    b.ToTable("Sn_StdBasic_ProjectItemRltComponentCategory");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.ProjectItemRltIndividualProject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IndividualProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectItemId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IndividualProjectId");

                    b.HasIndex("ProjectItemId");

                    b.ToTable("Sn_StdBasic_ProjectItemRltIndividualProject");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.ProjectItemRltProcessTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProcessTemplateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectItemId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProcessTemplateId");

                    b.ToTable("Sn_StdBasic_ProjectItemRltProcessTemplate");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.ProjectItemRltProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectItemId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProjectItemId");

                    b.ToTable("Sn_StdBasic_ProjectItemRltProductCategory");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.Quota", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<decimal>("LaborCost")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MachineCost")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MaterialCost")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("QuotaCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("QuotaCategoryId");

                    b.ToTable("Sn_StdBasic_Quota");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.QuotaCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AreaId")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpecialtyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StandardCodeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SpecialtyId");

                    b.HasIndex("StandardCodeId");

                    b.ToTable("Sn_StdBasic_QuotaCategory");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.QuotaItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BasePriceId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Number")
                        .HasColumnType("numeric");

                    b.Property<Guid>("QuotaId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BasePriceId");

                    b.HasIndex("QuotaId");

                    b.ToTable("Sn_StdBasic_QuotaItem");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.RepairGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Sn_StdBasic_RepairGroup");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.RepairItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsMonth")
                        .HasColumnType("boolean");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Period")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("PeriodUnit")
                        .HasColumnType("integer")
                        .HasMaxLength(50);

                    b.Property<string>("Remark")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<Guid?>("TagId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Unit")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("TagId");

                    b.ToTable("Sn_StdBasic_RepairItem");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.RepairItemRltComponentCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComponentCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RepairItemId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ComponentCategoryId");

                    b.HasIndex("RepairItemId");

                    b.ToTable("Sn_StdBasic_RepairItemRltComponentCategory");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.RepairItemRltOrganizationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrganizationTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RepairItemId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationTypeId");

                    b.HasIndex("RepairItemId");

                    b.ToTable("Sn_StdBasic_RepairItemRltOrganizationType");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.RepairTestItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<float?>("MaxRated")
                        .HasColumnType("real");

                    b.Property<float?>("MinRated")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("RepairItemId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Unit")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("RepairItemId");

                    b.ToTable("Sn_StdBasic_RepairTestItem");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.RevitConnector", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModelFileId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ModelFileId");

                    b.ToTable("Sn_StdBasic_RevitConnector");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.WorkAttention", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsType")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RepairTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RepairTagId");

                    b.HasIndex("TypeId");

                    b.ToTable("Sn_StdBasic_WorkAttention");
                });

            modelBuilder.Entity("SnAbp.Tasks.Entities.TaskRltFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<int>("FileType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("TaskId");

                    b.ToTable("Sn_Task_TaskRltFile");
                });

            modelBuilder.Entity("SnAbp.Tasks.Entities.TaskRltMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<int>("Responsible")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("TaskId");

                    b.ToTable("Sn_Task_TaskRltMember");
                });

            modelBuilder.Entity("SnAbp.Tasks.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("Progress")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Proportion")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Sn_Task_Task");
                });

            modelBuilder.Entity("SnAbp.Technology.Entities.ConstructInterface", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BuilderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EquipmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("GisData")
                        .HasColumnType("text");

                    b.Property<Guid?>("InterfaceManagementTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("MarerialCount")
                        .HasColumnType("text");

                    b.Property<string>("MarerialName")
                        .HasColumnType("text");

                    b.Property<int>("MarkType")
                        .HasColumnType("integer");

                    b.Property<string>("MaterialSpec")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProfessionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BuilderId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("InterfaceManagementTypeId");

                    b.HasIndex("ProfessionId");

                    b.ToTable("Sn_Technology_ConstructInterface");
                });

            modelBuilder.Entity("SnAbp.Technology.Entities.ConstructInterfaceInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuilderId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ConstructInterfaceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("MarkDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MarkType")
                        .HasColumnType("integer");

                    b.Property<Guid>("MarkerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReformDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ReformExplain")
                        .HasColumnType("text");

                    b.Property<Guid?>("ReformerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BuilderId");

                    b.HasIndex("ConstructInterfaceId");

                    b.HasIndex("MarkerId");

                    b.HasIndex("ReformerId");

                    b.ToTable("Sn_Technology_ConstructInterfaceInfo");
                });

            modelBuilder.Entity("SnAbp.Technology.Entities.ConstructInterfaceInfoRltMarkFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConstructInterfaceInfoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarkFileId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ConstructInterfaceInfoId");

                    b.HasIndex("MarkFileId");

                    b.ToTable("Sn_Technology_ConstructInterfaceInfoRltMarkFile");
                });

            modelBuilder.Entity("SnAbp.Technology.Entities.Disclose", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("FileType")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Size")
                        .HasColumnType("numeric");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Sn_Technology_Disclose");
                });

            modelBuilder.Entity("SnAbp.Technology.Entities.Material", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("ProductCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("Spec")
                        .HasColumnType("text");

                    b.Property<Guid?>("TypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Sn_Technology_Material");
                });

            modelBuilder.Entity("SnAbp.Technology.Entities.MaterialPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("PlanName")
                        .HasColumnType("text");

                    b.Property<DateTime>("PlanTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<bool>("Submit")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("WorkflowId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WorkflowTemplateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("WorkflowId");

                    b.HasIndex("WorkflowTemplateId");

                    b.ToTable("Sn_Technology_MaterialPlan");
                });

            modelBuilder.Entity("SnAbp.Technology.Entities.MaterialPlanFlowInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialPlanId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<Guid>("WorkFlowId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MaterialPlanId");

                    b.ToTable("Sn_Technology_MaterialPlanFlowInfo");
                });

            modelBuilder.Entity("SnAbp.Technology.Entities.MaterialPlanRltMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Count")
                        .HasColumnType("numeric");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialPlanId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationRootTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("MaterialPlanId");

                    b.ToTable("Sn_Technology_MaterialPlanRltMaterial");
                });

            modelBuilder.Entity("SnAbp.TenantManagement.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Sn_App_Tenants");
                });

            modelBuilder.Entity("SnAbp.TenantManagement.TenantConnectionString", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("character varying(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("TenantId", "Name");

                    b.ToTable("Sn_App_TenantConnectionStrings");
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApplicationName")
                        .HasColumnName("ApplicationName")
                        .HasColumnType("character varying(96)")
                        .HasMaxLength(96);

                    b.Property<string>("BrowserInfo")
                        .HasColumnName("BrowserInfo")
                        .HasColumnType("character varying(512)")
                        .HasMaxLength(512);

                    b.Property<string>("ClientId")
                        .HasColumnName("ClientId")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("ClientIpAddress")
                        .HasColumnName("ClientIpAddress")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasColumnName("ClientName")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Comments")
                        .HasColumnName("Comments")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<string>("CorrelationId")
                        .HasColumnName("CorrelationId")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Exceptions")
                        .HasColumnName("Exceptions")
                        .HasColumnType("character varying(4000)")
                        .HasMaxLength(4000);

                    b.Property<int>("ExecutionDuration")
                        .HasColumnName("ExecutionDuration")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<string>("HttpMethod")
                        .HasColumnName("HttpMethod")
                        .HasColumnType("character varying(16)")
                        .HasMaxLength(16);

                    b.Property<int?>("HttpStatusCode")
                        .HasColumnName("HttpStatusCode")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ImpersonatorTenantId")
                        .HasColumnName("ImpersonatorTenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ImpersonatorUserId")
                        .HasColumnName("ImpersonatorUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TenantId")
                        .HasColumnName("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("TenantName")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnName("Url")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<Guid?>("UserId")
                        .HasColumnName("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .HasColumnName("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "ExecutionTime");

                    b.HasIndex("TenantId", "UserId", "ExecutionTime");

                    b.ToTable("AbpAuditLogs");
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLogAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuditLogId")
                        .HasColumnName("AuditLogId")
                        .HasColumnType("uuid");

                    b.Property<int>("ExecutionDuration")
                        .HasColumnName("ExecutionDuration")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnName("ExecutionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<string>("MethodName")
                        .HasColumnName("MethodName")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Parameters")
                        .HasColumnName("Parameters")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("ServiceName")
                        .HasColumnName("ServiceName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<Guid?>("TenantId")
                        .HasColumnName("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuditLogId");

                    b.HasIndex("TenantId", "ServiceName", "MethodName", "ExecutionTime");

                    b.ToTable("AbpAuditLogActions");
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.EntityChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuditLogId")
                        .HasColumnName("AuditLogId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ChangeTime")
                        .HasColumnName("ChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("ChangeType")
                        .HasColumnName("ChangeType")
                        .HasColumnType("smallint");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasColumnName("EntityId")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<Guid?>("EntityTenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("EntityTypeFullName")
                        .IsRequired()
                        .HasColumnName("EntityTypeFullName")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<Guid?>("TenantId")
                        .HasColumnName("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuditLogId");

                    b.HasIndex("TenantId", "EntityTypeFullName", "EntityId");

                    b.ToTable("AbpEntityChanges");
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.EntityPropertyChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityChangeId")
                        .HasColumnType("uuid");

                    b.Property<string>("NewValue")
                        .HasColumnName("NewValue")
                        .HasColumnType("character varying(512)")
                        .HasMaxLength(512);

                    b.Property<string>("OriginalValue")
                        .HasColumnName("OriginalValue")
                        .HasColumnType("character varying(512)")
                        .HasMaxLength(512);

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasColumnName("PropertyName")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("PropertyTypeFullName")
                        .IsRequired()
                        .HasColumnName("PropertyTypeFullName")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<Guid?>("TenantId")
                        .HasColumnName("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeId");

                    b.ToTable("AbpEntityPropertyChanges");
                });

            modelBuilder.Entity("SnAbp.Alarm.Entities.Alarm", b =>
                {
                    b.HasOne("SnAbp.Resource.Entities.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Alarm.Entities.AlarmConfig", b =>
                {
                    b.HasOne("SnAbp.StdBasic.Entities.ComponentCategory", "ComponentCategory")
                        .WithMany()
                        .HasForeignKey("ComponentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Basic.Entities.InstallationSite", b =>
                {
                    b.HasOne("SnAbp.Identity.DataDictionary", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("SnAbp.Identity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("SnAbp.Basic.Entities.InstallationSite", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("SnAbp.Basic.Entities.Railway", "Railway")
                        .WithMany()
                        .HasForeignKey("RailwayId");

                    b.HasOne("SnAbp.Basic.Entities.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationId");

                    b.HasOne("SnAbp.Identity.DataDictionary", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("SnAbp.Basic.Entities.RailwayRltOrganization", b =>
                {
                    b.HasOne("SnAbp.Identity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("SnAbp.Basic.Entities.Railway", "Railway")
                        .WithMany("RailwayRltOrganizations")
                        .HasForeignKey("RailwayId");
                });

            modelBuilder.Entity("SnAbp.Basic.Entities.Station", b =>
                {
                    b.HasOne("SnAbp.Basic.Entities.Station", "SectionEndStation")
                        .WithMany()
                        .HasForeignKey("SectionEndStationId");

                    b.HasOne("SnAbp.Basic.Entities.Station", "SectionStartStation")
                        .WithMany()
                        .HasForeignKey("SectionStartStationId");
                });

            modelBuilder.Entity("SnAbp.Basic.Entities.StationRltOrganization", b =>
                {
                    b.HasOne("SnAbp.Identity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Basic.Entities.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Basic.Entities.StationRltRailway", b =>
                {
                    b.HasOne("SnAbp.Basic.Entities.Railway", "Railway")
                        .WithMany()
                        .HasForeignKey("RailwayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Basic.Entities.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Bpm.Entities.FlowTemplate", b =>
                {
                    b.HasOne("SnAbp.Bpm.Entities.FormTemplate", "FormTemplate")
                        .WithMany("FlowTemplates")
                        .HasForeignKey("FormTemplateId");
                });

            modelBuilder.Entity("SnAbp.Bpm.Entities.FlowTemplateNode", b =>
                {
                    b.HasOne("SnAbp.Bpm.Entities.FlowTemplate", "FlowTemplate")
                        .WithMany("Nodes")
                        .HasForeignKey("FlowTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Bpm.Entities.FlowTemplateNodeRltMember", b =>
                {
                    b.HasOne("SnAbp.Bpm.Entities.FlowTemplateNode", "FlowTemplateNode")
                        .WithMany("Members")
                        .HasForeignKey("FlowTemplateNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Bpm.Entities.FlowTemplateStep", b =>
                {
                    b.HasOne("SnAbp.Bpm.Entities.FlowTemplate", "FlowTemplate")
                        .WithMany("Steps")
                        .HasForeignKey("FlowTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Bpm.Entities.FormTemplate", b =>
                {
                    b.HasOne("SnAbp.Bpm.Entities.WorkflowTemplate", "WorkflowTemplate")
                        .WithMany("FormTemplates")
                        .HasForeignKey("WorkflowTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Bpm.Entities.Workflow", b =>
                {
                    b.HasOne("SnAbp.Bpm.Entities.FlowTemplate", "FlowTemplate")
                        .WithMany("Workflows")
                        .HasForeignKey("FlowTemplateId");
                });

            modelBuilder.Entity("SnAbp.Bpm.Entities.WorkflowData", b =>
                {
                    b.HasOne("SnAbp.Bpm.Entities.Workflow", "Workflow")
                        .WithMany("WorkflowDatas")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Bpm.Entities.WorkflowStateRltMember", b =>
                {
                    b.HasOne("SnAbp.Bpm.Entities.Workflow", "Workflow")
                        .WithMany()
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Bpm.Entities.WorkflowTemplate", b =>
                {
                    b.HasOne("SnAbp.Bpm.Entities.WorkflowTemplateGroup", "WorkflowTemplateGroup")
                        .WithMany("WorkflowTemplates")
                        .HasForeignKey("WorkflowTemplateGroupId");
                });

            modelBuilder.Entity("SnAbp.Bpm.Entities.WorkflowTemplateGroup", b =>
                {
                    b.HasOne("SnAbp.Bpm.Entities.WorkflowTemplateGroup", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("SnAbp.Bpm.Entities.WorkflowTemplateRltMember", b =>
                {
                    b.HasOne("SnAbp.Bpm.Entities.WorkflowTemplate", "WorkflowTemplate")
                        .WithMany("Members")
                        .HasForeignKey("WorkflowTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Cms.Entities.Article", b =>
                {
                    b.HasOne("SnAbp.File.Entities.File", "Thumb")
                        .WithMany()
                        .HasForeignKey("ThumbId");
                });

            modelBuilder.Entity("SnAbp.Cms.Entities.ArticleAccessory", b =>
                {
                    b.HasOne("SnAbp.Cms.Entities.Article", "Article")
                        .WithMany("Accessories")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.File.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Cms.Entities.ArticleCarousel", b =>
                {
                    b.HasOne("SnAbp.Cms.Entities.Article", "Article")
                        .WithMany("Carousels")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.File.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Cms.Entities.Category", b =>
                {
                    b.HasOne("SnAbp.Cms.Entities.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("SnAbp.File.Entities.File", "Thumb")
                        .WithMany()
                        .HasForeignKey("ThumbId");
                });

            modelBuilder.Entity("SnAbp.Cms.Entities.CategoryRltArticle", b =>
                {
                    b.HasOne("SnAbp.Cms.Entities.Article", "Article")
                        .WithMany("Categories")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Cms.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Common.Entities.Area", b =>
                {
                    b.HasOne("SnAbp.Common.Entities.Area", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("SnAbp.Construction.Entities.Daily", b =>
                {
                    b.HasOne("SnAbp.Construction.Entities.DailyTemplate", "DailyTemplate")
                        .WithMany()
                        .HasForeignKey("DailyTemplateId");

                    b.HasOne("SnAbp.Construction.Entities.Dispatch", "Dispatch")
                        .WithMany()
                        .HasForeignKey("DispatchId");

                    b.HasOne("SnAbp.Identity.IdentityUser", "Informant")
                        .WithMany()
                        .HasForeignKey("InformantId");

                    b.HasOne("SnAbp.Bpm.Entities.Workflow", "Workflow")
                        .WithMany()
                        .HasForeignKey("WorkflowId");

                    b.HasOne("SnAbp.Bpm.Entities.WorkflowTemplate", "WorkflowTemplate")
                        .WithMany()
                        .HasForeignKey("WorkflowTemplateId");
                });

            modelBuilder.Entity("SnAbp.Construction.Entities.DailyFlowInfo", b =>
                {
                    b.HasOne("SnAbp.Construction.Entities.Daily", "Daily")
                        .WithMany()
                        .HasForeignKey("DailyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Construction.Entities.DailyRltFile", b =>
                {
                    b.HasOne("SnAbp.Construction.Entities.Daily", "Daily")
                        .WithMany("DailyRltFiles")
                        .HasForeignKey("DailyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.File.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Construction.Entities.DailyRltPlanMaterial", b =>
                {
                    b.HasOne("SnAbp.Construction.Entities.Daily", "Daily")
                        .WithMany("DailyRltPlan")
                        .HasForeignKey("DailyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Construction.Plans.PlanMaterial", "PlanMaterial")
                        .WithMany()
                        .HasForeignKey("PlanMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Construction.Entities.DailyRltQuality", b =>
                {
                    b.HasOne("SnAbp.Construction.Entities.Daily", "Daily")
                        .WithMany("DailyRltQuality")
                        .HasForeignKey("DailyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Quality.Entities.QualityProblem", "QualityProblem")
                        .WithMany()
                        .HasForeignKey("QualityProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Construction.Entities.DailyRltSafe", b =>
                {
                    b.HasOne("SnAbp.Construction.Entities.Daily", "Daily")
                        .WithMany("DailyRltSafe")
                        .HasForeignKey("DailyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Safe.Entities.SafeProblem", "SafeProblem")
                        .WithMany()
                        .HasForeignKey("SafeProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Construction.Entities.Dispatch", b =>
                {
                    b.HasOne("SnAbp.Identity.DataDictionary", "Contractor")
                        .WithMany()
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Identity.IdentityUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("SnAbp.Construction.Entities.DispatchTemplate", "DispatchTemplate")
                        .WithMany()
                        .HasForeignKey("DispatchTemplateId");

                    b.HasOne("SnAbp.Bpm.Entities.Workflow", "Workflow")
                        .WithMany()
                        .HasForeignKey("WorkflowId");

                    b.HasOne("SnAbp.Bpm.Entities.WorkflowTemplate", "WorkflowTemplate")
                        .WithMany()
                        .HasForeignKey("WorkflowTemplateId");
                });

            modelBuilder.Entity("SnAbp.Construction.Entities.DispatchRltFile", b =>
                {
                    b.HasOne("SnAbp.Construction.Entities.Dispatch", "Dispatch")
                        .WithMany("DispatchRltFiles")
                        .HasForeignKey("DispatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.File.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Construction.Entities.DispatchRltMaterial", b =>
                {
                    b.HasOne("SnAbp.Construction.Entities.Dispatch", "Dispatch")
                        .WithMany("DispatchRltMaterials")
                        .HasForeignKey("DispatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Technology.Entities.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Construction.Entities.DispatchRltPlanContent", b =>
                {
                    b.HasOne("SnAbp.Construction.Entities.Dispatch", "Dispatch")
                        .WithMany("DispatchRltPlanContents")
                        .HasForeignKey("DispatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Construction.Plans.PlanContent", "PlanContent")
                        .WithMany()
                        .HasForeignKey("PlanContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Construction.Entities.DispatchRltSection", b =>
                {
                    b.HasOne("SnAbp.Construction.Entities.Dispatch", "Dispatch")
                        .WithMany("DispatchRltSections")
                        .HasForeignKey("DispatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.ConstructionBase.Entities.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Construction.Entities.DispatchRltStandard", b =>
                {
                    b.HasOne("SnAbp.Construction.Entities.Dispatch", "Dispatch")
                        .WithMany("DispatchRltStandards")
                        .HasForeignKey("DispatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.ConstructionBase.Entities.Standard", "Standard")
                        .WithMany()
                        .HasForeignKey("StandardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Construction.Entities.DispatchRltWorkFlow", b =>
                {
                    b.HasOne("SnAbp.Construction.Entities.Dispatch", "Dispatch")
                        .WithMany()
                        .HasForeignKey("DispatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Construction.Entities.DispatchRltWorker", b =>
                {
                    b.HasOne("SnAbp.Construction.Entities.Dispatch", "Dispatch")
                        .WithMany("DispatchRltWorkers")
                        .HasForeignKey("DispatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Identity.IdentityUser", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Construction.Entities.UnplannedTask", b =>
                {
                    b.HasOne("SnAbp.Construction.Entities.Daily", "Daily")
                        .WithMany("UnplannedTask")
                        .HasForeignKey("DailyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Construction.MasterPlans.Entities.MasterPlan", b =>
                {
                    b.HasOne("SnAbp.Identity.IdentityUser", "Charger")
                        .WithMany()
                        .HasForeignKey("ChargerId");

                    b.HasOne("SnAbp.Bpm.Entities.Workflow", "Workflow")
                        .WithMany()
                        .HasForeignKey("WorkflowId");

                    b.HasOne("SnAbp.Bpm.Entities.WorkflowTemplate", "WorkflowTemplate")
                        .WithMany()
                        .HasForeignKey("WorkflowTemplateId");
                });

            modelBuilder.Entity("SnAbp.Construction.MasterPlans.Entities.MasterPlanContent", b =>
                {
                    b.HasOne("SnAbp.Construction.MasterPlans.Entities.MasterPlan", "MasterPlan")
                        .WithOne("MasterPlanContent")
                        .HasForeignKey("SnAbp.Construction.MasterPlans.Entities.MasterPlanContent", "MasterPlanId")
                        .HasConstraintName("FK_MasterPlan_MasterPlanContent");

                    b.HasOne("SnAbp.Construction.MasterPlans.Entities.MasterPlanContent", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("SnAbp.ConstructionBase.Entities.SubItemContent", "SubItemContent")
                        .WithMany()
                        .HasForeignKey("SubItemContentId");
                });

            modelBuilder.Entity("SnAbp.Construction.MasterPlans.Entities.MasterPlanRltContentRltAntecedent", b =>
                {
                    b.HasOne("SnAbp.Construction.MasterPlans.Entities.MasterPlanContent", "FrontMasterPlanContent")
                        .WithMany()
                        .HasForeignKey("FrontMasterPlanContentId")
                        .HasConstraintName("FK_Rlt");

                    b.HasOne("SnAbp.Construction.MasterPlans.Entities.MasterPlanContent", "MasterPlanContent")
                        .WithMany()
                        .HasForeignKey("MasterPlanContentId")
                        .HasConstraintName("FK_Main");

                    b.HasOne("SnAbp.Construction.MasterPlans.Entities.MasterPlanContent", null)
                        .WithMany("Antecedents")
                        .HasForeignKey("MasterPlanContentId1");
                });

            modelBuilder.Entity("SnAbp.Construction.MasterPlans.Entities.MasterPlanRltWorkflowInfo", b =>
                {
                    b.HasOne("SnAbp.Construction.MasterPlans.Entities.MasterPlan", "MasterPlan")
                        .WithMany("MasterPlanRltWorkflowInfos")
                        .HasForeignKey("MasterPlanId");

                    b.HasOne("SnAbp.Bpm.Entities.Workflow", "Workflow")
                        .WithMany()
                        .HasForeignKey("WorkflowId");
                });

            modelBuilder.Entity("SnAbp.Construction.Plans.Plan", b =>
                {
                    b.HasOne("SnAbp.Identity.IdentityUser", "Charger")
                        .WithMany()
                        .HasForeignKey("ChargerId");

                    b.HasOne("SnAbp.Construction.MasterPlans.Entities.MasterPlan", "MasterPlan")
                        .WithMany()
                        .HasForeignKey("MasterPlanId");

                    b.HasOne("SnAbp.Bpm.Entities.Workflow", "Workflow")
                        .WithMany()
                        .HasForeignKey("WorkflowId");

                    b.HasOne("SnAbp.Bpm.Entities.WorkflowTemplate", "WorkflowTemplate")
                        .WithMany()
                        .HasForeignKey("WorkflowTemplateId");
                });

            modelBuilder.Entity("SnAbp.Construction.Plans.PlanContent", b =>
                {
                    b.HasOne("SnAbp.Construction.Plans.PlanContent", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("SnAbp.Construction.Plans.Plan", "Plan")
                        .WithOne("PlanContent")
                        .HasForeignKey("SnAbp.Construction.Plans.PlanContent", "PlanId")
                        .HasConstraintName("FK_Plan_PlanContent");

                    b.HasOne("SnAbp.ConstructionBase.Entities.SubItemContent", "SubItemContent")
                        .WithMany()
                        .HasForeignKey("SubItemContentId");
                });

            modelBuilder.Entity("SnAbp.Construction.Plans.PlanContentRltAntecedent", b =>
                {
                    b.HasOne("SnAbp.Construction.Plans.PlanContent", "FrontPlanContent")
                        .WithMany()
                        .HasForeignKey("FrontPlanContentId")
                        .HasConstraintName("FK_Rlt");

                    b.HasOne("SnAbp.Construction.Plans.PlanContent", "PlanContent")
                        .WithMany()
                        .HasForeignKey("PlanContentId")
                        .HasConstraintName("FK_Main");

                    b.HasOne("SnAbp.Construction.Plans.PlanContent", null)
                        .WithMany("Antecedents")
                        .HasForeignKey("PlanContentId1");
                });

            modelBuilder.Entity("SnAbp.Construction.Plans.PlanContentRltFile", b =>
                {
                    b.HasOne("SnAbp.File.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.HasOne("SnAbp.Construction.Plans.PlanContent", "PlanContent")
                        .WithMany("Files")
                        .HasForeignKey("PlanContentId");
                });

            modelBuilder.Entity("SnAbp.Construction.Plans.PlanContentRltMaterial", b =>
                {
                    b.HasOne("SnAbp.Construction.Plans.PlanContent", "PlanContent")
                        .WithMany()
                        .HasForeignKey("PlanContentId");
                });

            modelBuilder.Entity("SnAbp.Construction.Plans.PlanMaterial", b =>
                {
                    b.HasOne("SnAbp.Construction.Plans.PlanContent", "PlanContent")
                        .WithMany("PlanMaterials")
                        .HasForeignKey("PlanContentId");
                });

            modelBuilder.Entity("SnAbp.Construction.Plans.PlanMaterialRltEquipment", b =>
                {
                    b.HasOne("SnAbp.Resource.Entities.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Construction.Plans.PlanMaterial", "PlanMaterial")
                        .WithMany("PlanMaterialRltEquipments")
                        .HasForeignKey("PlanMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Construction.Plans.PlanRltWorkflowInfo", b =>
                {
                    b.HasOne("SnAbp.Construction.Plans.Plan", "Plan")
                        .WithMany("PlanRltWorkflowInfos")
                        .HasForeignKey("PlanId");
                });

            modelBuilder.Entity("SnAbp.ConstructionBase.Entities.EquipmentTeam", b =>
                {
                    b.HasOne("SnAbp.Identity.DataDictionary", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.ConstructionBase.Entities.Procedure", b =>
                {
                    b.HasOne("SnAbp.Identity.DataDictionary", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.ConstructionBase.Entities.ProcedureEquipmentTeam", b =>
                {
                    b.HasOne("SnAbp.ConstructionBase.Entities.EquipmentTeam", "EquipmentTeam")
                        .WithMany()
                        .HasForeignKey("EquipmentTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.ConstructionBase.Entities.Procedure", null)
                        .WithMany("ProcedureEquipmentTeams")
                        .HasForeignKey("ProcedureId")
                        .HasConstraintName("FK_Sn_ConstructionBase_ProcedureEquipmentTeam_Sn_Construction~1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.ConstructionBase.Entities.ProcedureMaterial", b =>
                {
                    b.HasOne("SnAbp.ConstructionBase.Entities.ConstructionBaseMaterial", "ConstructionBaseMaterial")
                        .WithMany()
                        .HasForeignKey("ConstructionBaseMaterialId");

                    b.HasOne("SnAbp.ConstructionBase.Entities.Procedure", null)
                        .WithMany("ProcedureMaterials")
                        .HasForeignKey("ProcedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.ConstructionBase.Entities.ProcedureRltFile", b =>
                {
                    b.HasOne("SnAbp.File.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.ConstructionBase.Entities.Procedure", null)
                        .WithMany("ProcedureRtlFiles")
                        .HasForeignKey("ProcedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.ConstructionBase.Entities.ProcedureWorker", b =>
                {
                    b.HasOne("SnAbp.ConstructionBase.Entities.Procedure", null)
                        .WithMany("ProcedureWorkers")
                        .HasForeignKey("ProcedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.ConstructionBase.Entities.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.ConstructionBase.Entities.RltProcedureRltEquipmentTeam", b =>
                {
                    b.HasOne("SnAbp.ConstructionBase.Entities.EquipmentTeam", "EquipmentTeam")
                        .WithMany()
                        .HasForeignKey("EquipmentTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.ConstructionBase.Entities.SubItemContentRltProcedure", null)
                        .WithMany("ProcedureEquipmentTeams")
                        .HasForeignKey("SubItemContentRltProcedureId")
                        .HasConstraintName("FK_Sn_ConstructionBase_RltProcedureRltEquipmentTeam_Sn_Constr~1");
                });

            modelBuilder.Entity("SnAbp.ConstructionBase.Entities.RltProcedureRltFile", b =>
                {
                    b.HasOne("SnAbp.File.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.ConstructionBase.Entities.SubItemContentRltProcedure", null)
                        .WithMany("ProcedureRtlFiles")
                        .HasForeignKey("SubItemContentRltProcedureId");
                });

            modelBuilder.Entity("SnAbp.ConstructionBase.Entities.RltProcedureRltMaterial", b =>
                {
                    b.HasOne("SnAbp.ConstructionBase.Entities.ConstructionBaseMaterial", "ConstructionBaseMaterial")
                        .WithMany()
                        .HasForeignKey("ConstructionBaseMaterialId");

                    b.HasOne("SnAbp.ConstructionBase.Entities.SubItemContentRltProcedure", null)
                        .WithMany("ProcedureMaterials")
                        .HasForeignKey("SubItemContentRltProcedureId")
                        .HasConstraintName("FK_Sn_ConstructionBase_RltProcedureRltMaterial_Sn_Constructio~1");
                });

            modelBuilder.Entity("SnAbp.ConstructionBase.Entities.RltProcedureRltWorker", b =>
                {
                    b.HasOne("SnAbp.ConstructionBase.Entities.SubItemContentRltProcedure", null)
                        .WithMany("ProcedureWorkers")
                        .HasForeignKey("SubItemContentRltProcedureId");

                    b.HasOne("SnAbp.ConstructionBase.Entities.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .HasConstraintName("FK_Sn_ConstructionBase_RltProcedureRltWorker_Sn_ConstructionB~1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.ConstructionBase.Entities.Section", b =>
                {
                    b.HasOne("SnAbp.ConstructionBase.Entities.Section", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("SnAbp.ConstructionBase.Entities.Standard", b =>
                {
                    b.HasOne("SnAbp.Identity.DataDictionary", "Profession")
                        .WithMany()
                        .HasForeignKey("ProfessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.ConstructionBase.Entities.SubItem", b =>
                {
                    b.HasOne("SnAbp.Identity.IdentityUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");
                });

            modelBuilder.Entity("SnAbp.ConstructionBase.Entities.SubItemContent", b =>
                {
                    b.HasOne("SnAbp.ConstructionBase.Entities.SubItemContent", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("SnAbp.ConstructionBase.Entities.SubItem", "SubItem")
                        .WithOne("SubItemContent")
                        .HasForeignKey("SnAbp.ConstructionBase.Entities.SubItemContent", "SubItemId")
                        .HasConstraintName("ForeignKey_SubItem_SubItemContent");
                });

            modelBuilder.Entity("SnAbp.ConstructionBase.Entities.SubItemContentRltProcedure", b =>
                {
                    b.HasOne("SnAbp.ConstructionBase.Entities.Procedure", "Procedure")
                        .WithMany()
                        .HasForeignKey("ProcedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.ConstructionBase.Entities.SubItemContent", null)
                        .WithMany("SubItemContentRltProcedures")
                        .HasForeignKey("SubItemContentId")
                        .HasConstraintName("FK_Sn_ConstructionBase_SubItemContentRltProcedure_Sn_Construc~1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.CostManagement.Entities.Contract", b =>
                {
                    b.HasOne("SnAbp.Identity.DataDictionary", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.CostManagement.Entities.ContractRltFile", b =>
                {
                    b.HasOne("SnAbp.CostManagement.Entities.Contract", "Contract")
                        .WithMany("ContractRltFiles")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.File.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.CostManagement.Entities.CostOther", b =>
                {
                    b.HasOne("SnAbp.Identity.DataDictionary", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.CostManagement.Entities.MoneyList", b =>
                {
                    b.HasOne("SnAbp.Identity.DataDictionary", "Payee")
                        .WithMany()
                        .HasForeignKey("PayeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Identity.DataDictionary", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.CostManagement.Entities.PeopleCost", b =>
                {
                    b.HasOne("SnAbp.Identity.DataDictionary", "Payee")
                        .WithMany()
                        .HasForeignKey("PayeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Identity.DataDictionary", "Professional")
                        .WithMany()
                        .HasForeignKey("ProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.AlterRecord", b =>
                {
                    b.HasOne("SnAbp.Identity.DataDictionary", "RepairTag")
                        .WithMany()
                        .HasForeignKey("RepairTagId");
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.DailyPlan", b =>
                {
                    b.HasOne("SnAbp.Identity.DataDictionary", "RepairTag")
                        .WithMany()
                        .HasForeignKey("RepairTagId");
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.DailyPlanAlter", b =>
                {
                    b.HasOne("SnAbp.Identity.DataDictionary", "RepairTag")
                        .WithMany()
                        .HasForeignKey("RepairTagId");
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.EquipmentTestResult", b =>
                {
                    b.HasOne("SnAbp.File.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.HasOne("SnAbp.Identity.DataDictionary", "RepairTag")
                        .WithMany()
                        .HasForeignKey("RepairTagId");
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.MaintenanceWork", b =>
                {
                    b.HasOne("SnAbp.Identity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Identity.DataDictionary", "RepairTag")
                        .WithMany()
                        .HasForeignKey("RepairTagId");
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.MaintenanceWorkRltFile", b =>
                {
                    b.HasOne("SnAbp.File.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.CrPlan.Entities.MaintenanceWork", "MaintenanceWork")
                        .WithMany("MaintenanceWorkRltFiles")
                        .HasForeignKey("MaintenanceWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.File.Entities.File", "RelateFile")
                        .WithMany()
                        .HasForeignKey("RelateFileId");
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.MaintenanceWorkRltSkylightPlan", b =>
                {
                    b.HasOne("SnAbp.CrPlan.Entities.MaintenanceWork", "MaintenanceWork")
                        .WithMany("MaintenanceWorkRltSkylightPlans")
                        .HasForeignKey("MaintenanceWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.CrPlan.Entities.SkylightPlan", "SkylightPlan")
                        .WithMany()
                        .HasForeignKey("SkylightPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.PlanDetail", b =>
                {
                    b.HasOne("SnAbp.StdBasic.Entities.InfluenceRange", "InfluenceRange")
                        .WithMany()
                        .HasForeignKey("InfluenceRangeId");

                    b.HasOne("SnAbp.Identity.DataDictionary", "RepairTag")
                        .WithMany()
                        .HasForeignKey("RepairTagId");
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.PlanRelateEquipment", b =>
                {
                    b.HasOne("SnAbp.Identity.DataDictionary", "RepairTag")
                        .WithMany()
                        .HasForeignKey("RepairTagId");
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.RepairUser", b =>
                {
                    b.HasOne("SnAbp.Identity.DataDictionary", "RepairTag")
                        .WithMany()
                        .HasForeignKey("RepairTagId");
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.SkylightPlan", b =>
                {
                    b.HasOne("SnAbp.Basic.Entities.Railway", "Railway")
                        .WithMany()
                        .HasForeignKey("RailwayId");

                    b.HasOne("SnAbp.Identity.DataDictionary", "RepairTag")
                        .WithMany()
                        .HasForeignKey("RepairTagId");
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.SkylightPlanRltInstallationSite", b =>
                {
                    b.HasOne("SnAbp.Basic.Entities.InstallationSite", "InstallationSite")
                        .WithMany()
                        .HasForeignKey("InstallationSiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.CrPlan.Entities.SkylightPlan", "SkylightPlan")
                        .WithMany("WorkSites")
                        .HasForeignKey("SkylightPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.SkylightPlanRltWorkTicket", b =>
                {
                    b.HasOne("SnAbp.CrPlan.Entities.SkylightPlan", "SkylightPlan")
                        .WithMany()
                        .HasForeignKey("SkylightPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.CrPlan.Entities.WorkTicket", "WorkTicket")
                        .WithMany()
                        .HasForeignKey("WorkTicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.WorkOrder", b =>
                {
                    b.HasOne("SnAbp.Identity.DataDictionary", "RepairTag")
                        .WithMany()
                        .HasForeignKey("RepairTagId");
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.WorkOrganization", b =>
                {
                    b.HasOne("SnAbp.Identity.DataDictionary", "RepairTag")
                        .WithMany()
                        .HasForeignKey("RepairTagId");
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.WorkTicket", b =>
                {
                    b.HasOne("SnAbp.Identity.IdentityUser", "SafetyDispatchChecker")
                        .WithMany()
                        .HasForeignKey("SafetyDispatchCheckerId");

                    b.HasOne("SnAbp.Identity.IdentityUser", "TechnicalChecker")
                        .WithMany()
                        .HasForeignKey("TechnicalCheckerId");
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.WorkTicketRltCooperationUnit", b =>
                {
                    b.HasOne("SnAbp.CrPlan.Entities.WorkTicket", "WorkTicket")
                        .WithMany()
                        .HasForeignKey("WorkTicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.Worker", b =>
                {
                    b.HasOne("SnAbp.Identity.DataDictionary", "RepairTag")
                        .WithMany()
                        .HasForeignKey("RepairTagId");
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.YearMonthPlan", b =>
                {
                    b.HasOne("SnAbp.Identity.DataDictionary", "RepairTag")
                        .WithMany()
                        .HasForeignKey("RepairTagId");
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.YearMonthPlanAlter", b =>
                {
                    b.HasOne("SnAbp.Identity.DataDictionary", "RepairTag")
                        .WithMany()
                        .HasForeignKey("RepairTagId");
                });

            modelBuilder.Entity("SnAbp.CrPlan.Entities.YearMonthPlanTestItem", b =>
                {
                    b.HasOne("SnAbp.File.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.HasOne("SnAbp.Identity.DataDictionary", "RepairTag")
                        .WithMany()
                        .HasForeignKey("RepairTagId");
                });

            modelBuilder.Entity("SnAbp.Emerg.Entities.EmergPlan", b =>
                {
                    b.HasOne("SnAbp.Identity.DataDictionary", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Emerg.Entities.EmergPlanProcessRecord", b =>
                {
                    b.HasOne("SnAbp.Emerg.Entities.EmergPlanRecord", "EmergPlanRecord")
                        .WithMany("ProcessRecords")
                        .HasForeignKey("EmergPlanRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Emerg.Entities.EmergPlanRecord", b =>
                {
                    b.HasOne("SnAbp.Identity.DataDictionary", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Emerg.Entities.EmergPlanRecordRltComponentCategory", b =>
                {
                    b.HasOne("SnAbp.StdBasic.Entities.ComponentCategory", "ComponentCategory")
                        .WithMany()
                        .HasForeignKey("ComponentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Emerg.Entities.EmergPlanRecord", "EmergPlanRecord")
                        .WithMany("EmergPlanRecordRltComponentCategories")
                        .HasForeignKey("EmergPlanRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Emerg.Entities.EmergPlanRecordRltFile", b =>
                {
                    b.HasOne("SnAbp.Emerg.Entities.EmergPlanRecord", "EmergPlanRecord")
                        .WithMany("EmergPlanRecordRltFiles")
                        .HasForeignKey("EmergPlanRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.File.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Emerg.Entities.EmergPlanRecordRltMember", b =>
                {
                    b.HasOne("SnAbp.Emerg.Entities.EmergPlanRecord", "EmergPlanRecord")
                        .WithMany("EmergPlanRecordRltMembers")
                        .HasForeignKey("EmergPlanRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Emerg.Entities.EmergPlanRltComponentCategory", b =>
                {
                    b.HasOne("SnAbp.StdBasic.Entities.ComponentCategory", "ComponentCategory")
                        .WithMany()
                        .HasForeignKey("ComponentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Emerg.Entities.EmergPlan", "EmergPlan")
                        .WithMany("EmergPlanRltComponentCategories")
                        .HasForeignKey("EmergPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Emerg.Entities.EmergPlanRltFile", b =>
                {
                    b.HasOne("SnAbp.Emerg.Entities.EmergPlan", "EmergPlan")
                        .WithMany("EmergPlanRltFiles")
                        .HasForeignKey("EmergPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.File.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Emerg.Entities.Fault", b =>
                {
                    b.HasOne("SnAbp.Identity.IdentityUser", "CheckInUser")
                        .WithMany()
                        .HasForeignKey("CheckInUserId");

                    b.HasOne("SnAbp.Identity.IdentityUser", "CheckOutUser")
                        .WithMany()
                        .HasForeignKey("CheckOutUserId");

                    b.HasOne("SnAbp.Emerg.Entities.EmergPlanRecord", "EmergPlanRecord")
                        .WithMany()
                        .HasForeignKey("EmergPlanRecordId");

                    b.HasOne("SnAbp.Identity.DataDictionary", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Identity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Basic.Entities.Railway", "Railway")
                        .WithMany()
                        .HasForeignKey("RailwayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Identity.DataDictionary", "ReasonType")
                        .WithMany()
                        .HasForeignKey("ReasonTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Basic.Entities.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Identity.IdentityUser", "SubmitUser")
                        .WithMany()
                        .HasForeignKey("SubmitUserId");
                });

            modelBuilder.Entity("SnAbp.Emerg.Entities.FaultRltComponentCategory", b =>
                {
                    b.HasOne("SnAbp.StdBasic.Entities.ComponentCategory", "ComponentCategory")
                        .WithMany()
                        .HasForeignKey("ComponentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Emerg.Entities.Fault", "Fault")
                        .WithMany("FaultRltComponentCategories")
                        .HasForeignKey("FaultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Emerg.Entities.FaultRltEquipment", b =>
                {
                    b.HasOne("SnAbp.Resource.Entities.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Emerg.Entities.Fault", "Fault")
                        .WithMany("FaultRltEquipments")
                        .HasForeignKey("FaultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.File.Entities.File", b =>
                {
                    b.HasOne("SnAbp.File.Entities.Folder", "Folder")
                        .WithMany("Files")
                        .HasForeignKey("FolderId");
                });

            modelBuilder.Entity("SnAbp.File.Entities.FileRltPermissions", b =>
                {
                    b.HasOne("SnAbp.File.Entities.File", "File")
                        .WithMany("Permissions")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.File.Entities.FileRltShare", b =>
                {
                    b.HasOne("SnAbp.File.Entities.File", "File")
                        .WithMany("Shares")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.File.Entities.FileRltTag", b =>
                {
                    b.HasOne("SnAbp.File.Entities.File", "File")
                        .WithMany("Tags")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.File.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.File.Entities.FileVersion", b =>
                {
                    b.HasOne("SnAbp.File.Entities.File", "File")
                        .WithMany("Versions")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.File.Entities.OssServer", "Oss")
                        .WithMany("FileVersions")
                        .HasForeignKey("OssId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.File.Entities.Folder", b =>
                {
                    b.HasOne("SnAbp.File.Entities.Folder", "Parent")
                        .WithMany("Folders")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("SnAbp.File.Entities.FolderRltPermissions", b =>
                {
                    b.HasOne("SnAbp.File.Entities.Folder", "Folder")
                        .WithMany("Permissions")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.File.Entities.FolderRltShare", b =>
                {
                    b.HasOne("SnAbp.File.Entities.Folder", "Folder")
                        .WithMany("Shares")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.File.Entities.FolderRltTag", b =>
                {
                    b.HasOne("SnAbp.File.Entities.Folder", "Folder")
                        .WithMany("Tags")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.File.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.FileApprove.Entities.FileApproveRltFlow", b =>
                {
                    b.HasOne("SnAbp.FileApprove.FileApprove", "FileApprove")
                        .WithMany()
                        .HasForeignKey("FileApproveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.FileApprove.FileApprove", b =>
                {
                    b.HasOne("SnAbp.File.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Bpm.Entities.Workflow", "Workflow")
                        .WithMany()
                        .HasForeignKey("WorkflowId");

                    b.HasOne("SnAbp.Bpm.Entities.WorkflowTemplate", "WorkflowTemplate")
                        .WithMany()
                        .HasForeignKey("WorkflowTemplateId");
                });

            modelBuilder.Entity("SnAbp.Identity.DataDictionary", b =>
                {
                    b.HasOne("SnAbp.Identity.DataDictionary", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("SnAbp.Identity.IdentityRoleClaim", b =>
                {
                    b.HasOne("SnAbp.Identity.IdentityRole", null)
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Identity.IdentityUser", b =>
                {
                    b.HasOne("SnAbp.Identity.DataDictionary", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");
                });

            modelBuilder.Entity("SnAbp.Identity.IdentityUserClaim", b =>
                {
                    b.HasOne("SnAbp.Identity.IdentityUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Identity.IdentityUserLogin", b =>
                {
                    b.HasOne("SnAbp.Identity.IdentityUser", null)
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Identity.IdentityUserRltOrganization", b =>
                {
                    b.HasOne("SnAbp.Identity.Organization", null)
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Identity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId1")
                        .HasConstraintName("FK_Sn_App_UserRltOrganization_Sn_App_Organization_Organizatio~1");

                    b.HasOne("SnAbp.Identity.IdentityUser", null)
                        .WithMany("Organizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Identity.IdentityUserRltRole", b =>
                {
                    b.HasOne("SnAbp.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Identity.IdentityUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Identity.IdentityUserToken", b =>
                {
                    b.HasOne("SnAbp.Identity.IdentityUser", null)
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Identity.Organization", b =>
                {
                    b.HasOne("SnAbp.Identity.Organization", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("SnAbp.Identity.DataDictionary", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("SnAbp.Identity.OrganizationRltRole", b =>
                {
                    b.HasOne("SnAbp.Identity.Organization", null)
                        .WithMany("Roles")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.IdentityServer.ApiResources.ApiResourceClaim", b =>
                {
                    b.HasOne("SnAbp.IdentityServer.ApiResources.ApiResource", null)
                        .WithMany("UserClaims")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.IdentityServer.ApiResources.ApiScope", b =>
                {
                    b.HasOne("SnAbp.IdentityServer.ApiResources.ApiResource", null)
                        .WithMany("Scopes")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.IdentityServer.ApiResources.ApiScopeClaim", b =>
                {
                    b.HasOne("SnAbp.IdentityServer.ApiResources.ApiScope", null)
                        .WithMany("UserClaims")
                        .HasForeignKey("ApiResourceId", "Name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.IdentityServer.ApiResources.ApiSecret", b =>
                {
                    b.HasOne("SnAbp.IdentityServer.ApiResources.ApiResource", null)
                        .WithMany("Secrets")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.IdentityServer.Clients.ClientClaim", b =>
                {
                    b.HasOne("SnAbp.IdentityServer.Clients.Client", null)
                        .WithMany("Claims")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.IdentityServer.Clients.ClientCorsOrigin", b =>
                {
                    b.HasOne("SnAbp.IdentityServer.Clients.Client", null)
                        .WithMany("AllowedCorsOrigins")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.IdentityServer.Clients.ClientGrantType", b =>
                {
                    b.HasOne("SnAbp.IdentityServer.Clients.Client", null)
                        .WithMany("AllowedGrantTypes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.IdentityServer.Clients.ClientIdPRestriction", b =>
                {
                    b.HasOne("SnAbp.IdentityServer.Clients.Client", null)
                        .WithMany("IdentityProviderRestrictions")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.IdentityServer.Clients.ClientPostLogoutRedirectUri", b =>
                {
                    b.HasOne("SnAbp.IdentityServer.Clients.Client", null)
                        .WithMany("PostLogoutRedirectUris")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.IdentityServer.Clients.ClientProperty", b =>
                {
                    b.HasOne("SnAbp.IdentityServer.Clients.Client", null)
                        .WithMany("Properties")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.IdentityServer.Clients.ClientRedirectUri", b =>
                {
                    b.HasOne("SnAbp.IdentityServer.Clients.Client", null)
                        .WithMany("RedirectUris")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.IdentityServer.Clients.ClientScope", b =>
                {
                    b.HasOne("SnAbp.IdentityServer.Clients.Client", null)
                        .WithMany("AllowedScopes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.IdentityServer.Clients.ClientSecret", b =>
                {
                    b.HasOne("SnAbp.IdentityServer.Clients.Client", null)
                        .WithMany("ClientSecrets")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.IdentityServer.IdentityResources.IdentityClaim", b =>
                {
                    b.HasOne("SnAbp.IdentityServer.IdentityResources.IdentityResource", null)
                        .WithMany("UserClaims")
                        .HasForeignKey("IdentityResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Material.Entities.Contract", b =>
                {
                    b.HasOne("SnAbp.Identity.IdentityUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");
                });

            modelBuilder.Entity("SnAbp.Material.Entities.ContractRltFile", b =>
                {
                    b.HasOne("SnAbp.Material.Entities.Contract", "Contract")
                        .WithMany("Files")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.File.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Material.Entities.EntryRecord", b =>
                {
                    b.HasOne("SnAbp.Identity.IdentityUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("SnAbp.Material.Entities.Partition", "Partition")
                        .WithMany()
                        .HasForeignKey("PartitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Material.Entities.EntryRecordRltFile", b =>
                {
                    b.HasOne("SnAbp.Material.Entities.EntryRecord", "EntryRecord")
                        .WithMany("EntryRecordRltFiles")
                        .HasForeignKey("EntryRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.File.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Material.Entities.EntryRecordRltMaterial", b =>
                {
                    b.HasOne("SnAbp.Material.Entities.EntryRecord", "EntryRecord")
                        .WithMany("EntryRecordRltMaterials")
                        .HasForeignKey("EntryRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Material.Entities.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Technology.Entities.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Material.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("SnAbp.Material.Entities.EntryRecordRltQRCode", b =>
                {
                    b.HasOne("SnAbp.Material.Entities.EntryRecord", "EntryRecord")
                        .WithMany("EntryRecordRltQRCodes")
                        .HasForeignKey("EntryRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Material.Entities.Inventory", b =>
                {
                    b.HasOne("SnAbp.Technology.Entities.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Material.Entities.Partition", "Partition")
                        .WithMany()
                        .HasForeignKey("PartitionId");

                    b.HasOne("SnAbp.Material.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("SnAbp.Material.Entities.MaterialAcceptance", b =>
                {
                    b.HasOne("SnAbp.Identity.IdentityUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("SnAbp.Identity.DataDictionary", "TestingOrganization")
                        .WithMany()
                        .HasForeignKey("TestingOrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Material.Entities.MaterialAcceptanceRltFile", b =>
                {
                    b.HasOne("SnAbp.File.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Material.Entities.MaterialAcceptance", "MaterialAcceptance")
                        .WithMany("MaterialAcceptanceRltFiles")
                        .HasForeignKey("MaterialAcceptanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Material.Entities.MaterialAcceptanceRltMaterial", b =>
                {
                    b.HasOne("SnAbp.Material.Entities.MaterialAcceptance", "MaterialAcceptance")
                        .WithMany("MaterialAcceptanceRltMaterials")
                        .HasForeignKey("MaterialAcceptanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Technology.Entities.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Material.Entities.MaterialAcceptanceRltPurchase", b =>
                {
                    b.HasOne("SnAbp.Material.Entities.MaterialAcceptance", "MaterialAcceptance")
                        .WithMany("MaterialAcceptanceRltPurchases")
                        .HasForeignKey("MaterialAcceptanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Material.Entities.PurchaseList", "PurchaseList")
                        .WithMany()
                        .HasForeignKey("PurchaseListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Material.Entities.MaterialAcceptanceRltQRCode", b =>
                {
                    b.HasOne("SnAbp.Material.Entities.MaterialAcceptance", "MaterialAcceptance")
                        .WithMany("MaterialAcceptanceRltQRCodes")
                        .HasForeignKey("MaterialAcceptanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Material.Entities.MaterialOfBill", b =>
                {
                    b.HasOne("SnAbp.ConstructionBase.Entities.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Material.Entities.MaterialOfBillRltAccessory", b =>
                {
                    b.HasOne("SnAbp.File.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.HasOne("SnAbp.Material.Entities.MaterialOfBill", "MaterialOfBill")
                        .WithMany("MaterialOfBillRltAccessories")
                        .HasForeignKey("MaterialOfBillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Material.Entities.MaterialOfBillRltMaterial", b =>
                {
                    b.HasOne("SnAbp.Material.Entities.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId");

                    b.HasOne("SnAbp.Material.Entities.MaterialOfBill", "MaterialOfBill")
                        .WithMany("MaterialOfBillRltMaterials")
                        .HasForeignKey("MaterialOfBillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Material.Entities.OutRecord", b =>
                {
                    b.HasOne("SnAbp.Identity.IdentityUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("SnAbp.Material.Entities.Partition", "Partition")
                        .WithMany()
                        .HasForeignKey("PartitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Material.Entities.OutRecordRltFile", b =>
                {
                    b.HasOne("SnAbp.File.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Material.Entities.OutRecord", "OutRecord")
                        .WithMany("OutRecordRltFiles")
                        .HasForeignKey("OutRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Material.Entities.OutRecordRltMaterial", b =>
                {
                    b.HasOne("SnAbp.Material.Entities.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Technology.Entities.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Material.Entities.OutRecord", "OutRecord")
                        .WithMany("OutRecordRltMaterials")
                        .HasForeignKey("OutRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Material.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Material.Entities.OutRecordRltQRCode", b =>
                {
                    b.HasOne("SnAbp.Material.Entities.OutRecord", "OutRecord")
                        .WithMany("OutRecordRltQRCodes")
                        .HasForeignKey("OutRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Material.Entities.Partition", b =>
                {
                    b.HasOne("SnAbp.File.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.HasOne("SnAbp.Material.Entities.Partition", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("SnAbp.Material.Entities.PurchaseList", b =>
                {
                    b.HasOne("SnAbp.Identity.IdentityUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("SnAbp.Bpm.Entities.Workflow", "Workflow")
                        .WithMany()
                        .HasForeignKey("WorkflowId");

                    b.HasOne("SnAbp.Bpm.Entities.WorkflowTemplate", "WorkflowTemplate")
                        .WithMany()
                        .HasForeignKey("WorkflowTemplateId");
                });

            modelBuilder.Entity("SnAbp.Material.Entities.PurchaseListRltFile", b =>
                {
                    b.HasOne("SnAbp.File.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Material.Entities.PurchaseList", "PurchaseList")
                        .WithMany("PurchaseListRltFiles")
                        .HasForeignKey("PurchaseListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Material.Entities.PurchaseListRltFlow", b =>
                {
                    b.HasOne("SnAbp.Material.Entities.PurchaseList", "PurchaseList")
                        .WithMany("PurchaseListRltFlows")
                        .HasForeignKey("PurchaseListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Material.Entities.PurchaseListRltMaterial", b =>
                {
                    b.HasOne("SnAbp.Technology.Entities.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Material.Entities.PurchaseList", "PurchaseList")
                        .WithMany("PurchaseListRltMaterials")
                        .HasForeignKey("PurchaseListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Material.Entities.PurchaseListRltPurchasePlan", b =>
                {
                    b.HasOne("SnAbp.Material.Entities.PurchaseList", "PurchaseList")
                        .WithMany("PurchaseListRltPurchasePlan")
                        .HasForeignKey("PurchaseListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Material.Entities.PurchasePlan", "PurchasePlan")
                        .WithMany()
                        .HasForeignKey("PurchasePlanId")
                        .HasConstraintName("FK_Sn_Material_PurchaseListRltPurchasePlan_Sn_Material_Purcha~1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Material.Entities.PurchasePlan", b =>
                {
                    b.HasOne("SnAbp.Identity.IdentityUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("SnAbp.Bpm.Entities.Workflow", "Workflow")
                        .WithMany()
                        .HasForeignKey("WorkflowId");

                    b.HasOne("SnAbp.Bpm.Entities.WorkflowTemplate", "WorkflowTemplate")
                        .WithMany()
                        .HasForeignKey("WorkflowTemplateId");
                });

            modelBuilder.Entity("SnAbp.Material.Entities.PurchasePlanRltFile", b =>
                {
                    b.HasOne("SnAbp.File.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Material.Entities.PurchasePlan", "PurchasePlan")
                        .WithMany("PurchasePlanRltFiles")
                        .HasForeignKey("PurchasePlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Material.Entities.PurchasePlanRltFlow", b =>
                {
                    b.HasOne("SnAbp.Material.Entities.PurchasePlan", "PurchasePlan")
                        .WithMany("PurchasePlanRltFlows")
                        .HasForeignKey("PurchasePlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Material.Entities.PurchasePlanRltMaterial", b =>
                {
                    b.HasOne("SnAbp.Technology.Entities.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Material.Entities.PurchasePlan", "PurchasePlan")
                        .WithMany("PurchasePlanRltMaterials")
                        .HasForeignKey("PurchasePlanId");
                });

            modelBuilder.Entity("SnAbp.Material.Entities.SupplierRltAccessory", b =>
                {
                    b.HasOne("SnAbp.File.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Material.Entities.Supplier", "Supplier")
                        .WithMany("SupplierRltAccessories")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Material.Entities.SupplierRltContacts", b =>
                {
                    b.HasOne("SnAbp.Material.Entities.Supplier", "Supplier")
                        .WithMany("SupplierRltContacts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Message.Bpm.Entities.BpmRltMessage", b =>
                {
                    b.HasOne("SnAbp.Identity.IdentityUser", "Processor")
                        .WithMany()
                        .HasForeignKey("ProcessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Identity.IdentityUser", "Sponsor")
                        .WithMany()
                        .HasForeignKey("SponsorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Bpm.Entities.Workflow", "Workflow")
                        .WithMany()
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Message.Notice.Entities.Notice", b =>
                {
                    b.HasOne("SnAbp.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Oa.Entities.Contract", b =>
                {
                    b.HasOne("SnAbp.Identity.Organization", "HostDepartment")
                        .WithMany()
                        .HasForeignKey("HostDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Identity.DataDictionary", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.HasOne("SnAbp.Identity.Organization", "UnderDepartment")
                        .WithMany()
                        .HasForeignKey("UnderDepartmentId");

                    b.HasOne("SnAbp.Identity.IdentityUser", "Undertaker")
                        .WithMany()
                        .HasForeignKey("UndertakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Oa.Entities.ContractRltFile", b =>
                {
                    b.HasOne("SnAbp.Oa.Entities.Contract", "Contract")
                        .WithMany("ContractRltFiles")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.File.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Oa.Entities.DutySchedule", b =>
                {
                    b.HasOne("SnAbp.Identity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Oa.Entities.DutyScheduleRltUser", b =>
                {
                    b.HasOne("SnAbp.Oa.Entities.DutySchedule", "DutySchedule")
                        .WithMany("DutyScheduleRltUsers")
                        .HasForeignKey("DutyScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Oa.Entities.Seal", b =>
                {
                    b.HasOne("SnAbp.File.Entities.File", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Oa.Entities.SealRltMember", b =>
                {
                    b.HasOne("SnAbp.Oa.Entities.Seal", "Seal")
                        .WithMany("SealRltMembers")
                        .HasForeignKey("SealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Problem.Entities.ProblemCategory", b =>
                {
                    b.HasOne("SnAbp.Problem.Entities.ProblemCategory", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("SnAbp.Problem.Entities.ProblemRltProblemCategory", b =>
                {
                    b.HasOne("SnAbp.Problem.Entities.ProblemCategory", "ProblemCategory")
                        .WithMany()
                        .HasForeignKey("ProblemCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Problem.Entities.Problem", "Problem")
                        .WithMany("ProblemRltProblemCategories")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Project.Entities.Archives", b =>
                {
                    b.HasOne("SnAbp.Project.Entities.ArchivesCategory", "ArchivesCategory")
                        .WithMany()
                        .HasForeignKey("ArchivesCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Project.Entities.BooksClassification", "BooksClassification")
                        .WithMany()
                        .HasForeignKey("BooksClassificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Project.Entities.ArchivesCategory", b =>
                {
                    b.HasOne("SnAbp.Project.Entities.ArchivesCategory", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("SnAbp.Project.Entities.Dossier", b =>
                {
                    b.HasOne("SnAbp.Project.Entities.Archives", "Archives")
                        .WithMany()
                        .HasForeignKey("ArchivesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Project.Entities.FileCategory", "FileCategory")
                        .WithMany()
                        .HasForeignKey("FileCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Project.Entities.DossierCategory", b =>
                {
                    b.HasOne("SnAbp.Project.Entities.DossierCategory", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("SnAbp.Project.Entities.DossierRltFile", b =>
                {
                    b.HasOne("SnAbp.Project.Entities.Dossier", "Dossier")
                        .WithMany("DossierRltFiles")
                        .HasForeignKey("DossierId");

                    b.HasOne("SnAbp.File.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId");
                });

            modelBuilder.Entity("SnAbp.Project.Entities.ProjectRltContract", b =>
                {
                    b.HasOne("SnAbp.Oa.Entities.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId");

                    b.HasOne("SnAbp.Project.Project", "Project")
                        .WithMany("ProjectRltContracts")
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("SnAbp.Project.Entities.ProjectRltFile", b =>
                {
                    b.HasOne("SnAbp.File.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.HasOne("SnAbp.Project.Project", "Project")
                        .WithMany("ProjectRltFiles")
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("SnAbp.Project.Entities.ProjectRltMember", b =>
                {
                    b.HasOne("SnAbp.Identity.IdentityUser", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.HasOne("SnAbp.Project.Project", "Project")
                        .WithMany("ProjectRltMembers")
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("SnAbp.Project.Entities.ProjectRltUnit", b =>
                {
                    b.HasOne("SnAbp.Project.Project", "Project")
                        .WithMany("ProjectRltUnits")
                        .HasForeignKey("ProjectId");

                    b.HasOne("SnAbp.Project.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");
                });

            modelBuilder.Entity("SnAbp.Project.Project", b =>
                {
                    b.HasOne("SnAbp.Identity.IdentityUser", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Identity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Identity.DataDictionary", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Quality.Entities.QualityProblem", b =>
                {
                    b.HasOne("SnAbp.Identity.Organization", "CheckUnit")
                        .WithMany()
                        .HasForeignKey("CheckUnitId");

                    b.HasOne("SnAbp.Identity.IdentityUser", "Checker")
                        .WithMany()
                        .HasForeignKey("CheckerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Identity.DataDictionary", "Profession")
                        .WithMany()
                        .HasForeignKey("ProfessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Identity.Organization", "ResponsibleOrganization")
                        .WithMany()
                        .HasForeignKey("ResponsibleOrganizationId");

                    b.HasOne("SnAbp.Identity.IdentityUser", "ResponsibleUser")
                        .WithMany()
                        .HasForeignKey("ResponsibleUserId");

                    b.HasOne("SnAbp.Identity.IdentityUser", "Verifier")
                        .WithMany()
                        .HasForeignKey("VerifierId");
                });

            modelBuilder.Entity("SnAbp.Quality.Entities.QualityProblemLibrary", b =>
                {
                    b.HasOne("SnAbp.Identity.DataDictionary", "Profession")
                        .WithMany()
                        .HasForeignKey("ProfessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Quality.Entities.QualityProblemLibraryRltScop", b =>
                {
                    b.HasOne("SnAbp.Quality.Entities.QualityProblemLibrary", "QualityProblemLibrary")
                        .WithMany("Scops")
                        .HasForeignKey("QualityProblemLibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Identity.DataDictionary", "Scop")
                        .WithMany()
                        .HasForeignKey("ScopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Quality.Entities.QualityProblemRecord", b =>
                {
                    b.HasOne("SnAbp.Quality.Entities.QualityProblem", "QualityProblem")
                        .WithMany()
                        .HasForeignKey("QualityProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Quality.Entities.QualityProblemRecordRltFile", b =>
                {
                    b.HasOne("SnAbp.File.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Quality.Entities.QualityProblemRecord", "QualityProblemRecord")
                        .WithMany("Files")
                        .HasForeignKey("QualityProblemRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Quality.Entities.QualityProblemRltCcUser", b =>
                {
                    b.HasOne("SnAbp.Identity.IdentityUser", "CcUser")
                        .WithMany()
                        .HasForeignKey("CcUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Quality.Entities.QualityProblem", "QualityProblem")
                        .WithMany("CcUsers")
                        .HasForeignKey("QualityProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Quality.Entities.QualityProblemRltEquipment", b =>
                {
                    b.HasOne("SnAbp.Resource.Entities.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Quality.Entities.QualityProblem", "QualityProblem")
                        .WithMany("Equipments")
                        .HasForeignKey("QualityProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Quality.Entities.QualityProblemRltFile", b =>
                {
                    b.HasOne("SnAbp.File.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Quality.Entities.QualityProblem", "QualityProblem")
                        .WithMany("Files")
                        .HasForeignKey("QualityProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Regulation.Entities.Institution", b =>
                {
                    b.HasOne("SnAbp.Identity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("SnAbp.Regulation.Entities.InstitutionRltAuthority", b =>
                {
                    b.HasOne("SnAbp.Regulation.Entities.Institution", "Institution")
                        .WithMany("InstitutionRltAuthorities")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Regulation.Entities.InstitutionRltEdition", b =>
                {
                    b.HasOne("SnAbp.Regulation.Entities.Institution", null)
                        .WithMany("InstitutionRltEditions")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Regulation.Entities.InstitutionRltFile", b =>
                {
                    b.HasOne("SnAbp.File.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.HasOne("SnAbp.Regulation.Entities.Institution", "Institution")
                        .WithMany("InstitutionRltFiles")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Regulation.Entities.InstitutionRltFlow", b =>
                {
                    b.HasOne("SnAbp.Identity.IdentityUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("SnAbp.Regulation.Entities.Institution", "Institution")
                        .WithOne("InstitutionRltFlow")
                        .HasForeignKey("SnAbp.Regulation.Entities.InstitutionRltFlow", "InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Oa.Entities.Seal", "Seal")
                        .WithMany()
                        .HasForeignKey("SealId");

                    b.HasOne("SnAbp.Bpm.Entities.Workflow", "WorkFlow")
                        .WithMany()
                        .HasForeignKey("WorkFlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Regulation.Entities.InstitutionRltLabel", b =>
                {
                    b.HasOne("SnAbp.Regulation.Entities.Institution", "Institution")
                        .WithMany("InstitutionRltLabels")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Regulation.Entities.Label", "Label")
                        .WithMany()
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Report.Entities.ReportRltFile", b =>
                {
                    b.HasOne("SnAbp.File.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Report.Report", "Report")
                        .WithMany("ReportRltFiles")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Report.Entities.ReportRltUser", b =>
                {
                    b.HasOne("SnAbp.Report.Report", "Report")
                        .WithMany("ReportRltUsers")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Report.Report", b =>
                {
                    b.HasOne("SnAbp.Identity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("SnAbp.Resource.Entities.CableCore", b =>
                {
                    b.HasOne("SnAbp.Resource.Entities.Equipment", "Cable")
                        .WithMany()
                        .HasForeignKey("CableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Resource.Entities.CableLocation", b =>
                {
                    b.HasOne("SnAbp.Resource.Entities.Equipment", "Cable")
                        .WithMany()
                        .HasForeignKey("CableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Resource.Entities.ComponentRltQRCode", b =>
                {
                    b.HasOne("SnAbp.Resource.Entities.Equipment", "GenerateEquipment")
                        .WithMany("ComponentRltQRCodes")
                        .HasForeignKey("GenerateEquipmentId");

                    b.HasOne("SnAbp.Resource.Entities.Equipment", "InstallationEquipment")
                        .WithMany()
                        .HasForeignKey("InstallationEquipmentId");
                });

            modelBuilder.Entity("SnAbp.Resource.Entities.ComponentTrackRecord", b =>
                {
                    b.HasOne("SnAbp.Resource.Entities.ComponentRltQRCode", "ComponentRltQRCode")
                        .WithMany()
                        .HasForeignKey("ComponentRltQRCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("SnAbp.Resource.Entities.Equipment", b =>
                {
                    b.HasOne("SnAbp.Resource.Entities.CableExtend", "CableExtend")
                        .WithMany()
                        .HasForeignKey("CableExtendId");

                    b.HasOne("SnAbp.StdBasic.Entities.ComponentCategory", "ComponentCategory")
                        .WithMany()
                        .HasForeignKey("ComponentCategoryId");

                    b.HasOne("SnAbp.Basic.Entities.InstallationSite", "EndInstallationSite")
                        .WithMany()
                        .HasForeignKey("EndInstallationSiteId");

                    b.HasOne("SnAbp.Resource.Entities.EquipmentGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.HasOne("SnAbp.Basic.Entities.InstallationSite", "InstallationSite")
                        .WithMany()
                        .HasForeignKey("InstallationSiteId");

                    b.HasOne("SnAbp.StdBasic.Entities.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("SnAbp.Identity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("SnAbp.Resource.Entities.Equipment", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("SnAbp.StdBasic.Entities.ProductCategory", "ProductCategory")
                        .WithMany()
                        .HasForeignKey("ProductCategoryId");

                    b.HasOne("SnAbp.Resource.Entities.StoreEquipment", "StoreEquipment")
                        .WithMany()
                        .HasForeignKey("StoreEquipmentId");
                });

            modelBuilder.Entity("SnAbp.Resource.Entities.EquipmentGroup", b =>
                {
                    b.HasOne("SnAbp.Identity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("SnAbp.Resource.Entities.EquipmentGroup", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("SnAbp.Resource.Entities.EquipmentProperty", b =>
                {
                    b.HasOne("SnAbp.Resource.Entities.Equipment", "Equipment")
                        .WithMany("EquipmentProperties")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.StdBasic.Entities.MVDCategory", "MVDCategory")
                        .WithMany()
                        .HasForeignKey("MVDCategoryId");

                    b.HasOne("SnAbp.StdBasic.Entities.MVDProperty", "MVDProperty")
                        .WithMany()
                        .HasForeignKey("MVDPropertyId");
                });

            modelBuilder.Entity("SnAbp.Resource.Entities.EquipmentRltFile", b =>
                {
                    b.HasOne("SnAbp.Resource.Entities.Equipment", "Equipment")
                        .WithMany("EquipmentRltFiles")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.File.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Resource.Entities.EquipmentRltOrganization", b =>
                {
                    b.HasOne("SnAbp.Resource.Entities.Equipment", null)
                        .WithMany("EquipmentRltOrganizations")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Identity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Resource.Entities.EquipmentServiceRecord", b =>
                {
                    b.HasOne("SnAbp.Resource.Entities.Equipment", "Equipment")
                        .WithMany("EquipmentServiceRecords")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Resource.Entities.StoreEquipment", "StoreEquipment")
                        .WithMany("EquipmentServiceRecords")
                        .HasForeignKey("StoreEquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("SnAbp.Resource.Entities.StoreEquipment", b =>
                {
                    b.HasOne("SnAbp.StdBasic.Entities.ComponentCategory", "ComponentCategory")
                        .WithMany()
                        .HasForeignKey("ComponentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Identity.IdentityUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("SnAbp.StdBasic.Entities.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("SnAbp.StdBasic.Entities.ProductCategory", "ProductCategory")
                        .WithMany()
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Resource.Entities.StoreHouse", "StoreHouse")
                        .WithMany()
                        .HasForeignKey("StoreHouseId");
                });

            modelBuilder.Entity("SnAbp.Resource.Entities.StoreEquipmentTest", b =>
                {
                    b.HasOne("SnAbp.Identity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("SnAbp.Identity.IdentityUser", "Tester")
                        .WithMany()
                        .HasForeignKey("TesterId");
                });

            modelBuilder.Entity("SnAbp.Resource.Entities.StoreEquipmentTestRltEquipment", b =>
                {
                    b.HasOne("SnAbp.Resource.Entities.StoreEquipment", "StoreEquipment")
                        .WithMany("StoreEquipmentTestRltEquipments")
                        .HasForeignKey("StoreEquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Resource.Entities.StoreEquipmentTest", "StoreEquipmentTest")
                        .WithMany("StoreEquipmentTestRltEquipments")
                        .HasForeignKey("StoreEquipmentTestId")
                        .HasConstraintName("FK_Sn_Resource_StoreEquipmentTestRltEquipment_Sn_Resource_Sto~1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Resource.Entities.StoreEquipmentTransfer", b =>
                {
                    b.HasOne("SnAbp.Resource.Entities.StoreHouse", "StoreHouse")
                        .WithMany()
                        .HasForeignKey("StoreHouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("SnAbp.Resource.Entities.StoreEquipmentTransferRltEquipment", b =>
                {
                    b.HasOne("SnAbp.Resource.Entities.StoreEquipment", "StoreEquipment")
                        .WithMany("StoreEquipmentTransferRltEquipments")
                        .HasForeignKey("StoreEquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Resource.Entities.StoreEquipmentTransfer", "StoreEquipmentTransfer")
                        .WithMany("StoreEquipmentTransferRltEquipments")
                        .HasForeignKey("StoreEquipmentTransferId")
                        .HasConstraintName("FK_Sn_Resource_StoreEquipmentTransferRltEquipment_Sn_Resource~1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Resource.Entities.StoreHouse", b =>
                {
                    b.HasOne("SnAbp.Common.Entities.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId");

                    b.HasOne("SnAbp.Identity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Resource.Entities.StoreHouse", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("SnAbp.Resource.Entities.Terminal", b =>
                {
                    b.HasOne("SnAbp.Resource.Entities.Equipment", "Equipment")
                        .WithMany("Terminals")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Resource.Entities.TerminalBusinessPathNode", b =>
                {
                    b.HasOne("SnAbp.Resource.Entities.CableCore", "CableCore")
                        .WithMany()
                        .HasForeignKey("CableCoreId");

                    b.HasOne("SnAbp.Resource.Entities.TerminalBusinessPath", "TerminalBusinessPath")
                        .WithMany("Nodes")
                        .HasForeignKey("TerminalBusinessPathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Resource.Entities.Terminal", "Terminal")
                        .WithMany()
                        .HasForeignKey("TerminalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Resource.Entities.TerminalLink", b =>
                {
                    b.HasOne("SnAbp.Resource.Entities.CableCore", "CableCore")
                        .WithMany()
                        .HasForeignKey("CableCoreId");

                    b.HasOne("SnAbp.Resource.Entities.Terminal", "TerminalA")
                        .WithMany("TerminalLinkAs")
                        .HasForeignKey("TerminalAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Resource.Entities.Terminal", "TerminalB")
                        .WithMany("TerminalLinkBs")
                        .HasForeignKey("TerminalBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Safe.Entities.SafeProblem", b =>
                {
                    b.HasOne("SnAbp.Identity.Organization", "CheckUnit")
                        .WithMany()
                        .HasForeignKey("CheckUnitId");

                    b.HasOne("SnAbp.Identity.IdentityUser", "Checker")
                        .WithMany()
                        .HasForeignKey("CheckerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Identity.DataDictionary", "Profession")
                        .WithMany()
                        .HasForeignKey("ProfessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Identity.Organization", "ResponsibleOrganization")
                        .WithMany()
                        .HasForeignKey("ResponsibleOrganizationId");

                    b.HasOne("SnAbp.Identity.IdentityUser", "ResponsibleUser")
                        .WithMany()
                        .HasForeignKey("ResponsibleUserId");

                    b.HasOne("SnAbp.Identity.DataDictionary", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Identity.IdentityUser", "Verifier")
                        .WithMany()
                        .HasForeignKey("VerifierId");
                });

            modelBuilder.Entity("SnAbp.Safe.Entities.SafeProblemLibrary", b =>
                {
                    b.HasOne("SnAbp.Identity.DataDictionary", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Identity.DataDictionary", "Profession")
                        .WithMany()
                        .HasForeignKey("ProfessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Safe.Entities.SafeProblemLibraryRltScop", b =>
                {
                    b.HasOne("SnAbp.Safe.Entities.SafeProblemLibrary", "SafeProblemLibrary")
                        .WithMany("Scops")
                        .HasForeignKey("SafeProblemLibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Identity.DataDictionary", "Scop")
                        .WithMany()
                        .HasForeignKey("ScopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Safe.Entities.SafeProblemRecord", b =>
                {
                    b.HasOne("SnAbp.Safe.Entities.SafeProblem", "SafeProblem")
                        .WithMany()
                        .HasForeignKey("SafeProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Safe.Entities.SafeProblemRecordRltFile", b =>
                {
                    b.HasOne("SnAbp.File.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Safe.Entities.SafeProblemRecord", "SafeProblemRecord")
                        .WithMany("Files")
                        .HasForeignKey("SafeProblemRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Safe.Entities.SafeProblemRltCcUser", b =>
                {
                    b.HasOne("SnAbp.Identity.IdentityUser", "CcUser")
                        .WithMany()
                        .HasForeignKey("CcUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Safe.Entities.SafeProblem", "SafeProblem")
                        .WithMany("CcUsers")
                        .HasForeignKey("SafeProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Safe.Entities.SafeProblemRltEquipment", b =>
                {
                    b.HasOne("SnAbp.Resource.Entities.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Safe.Entities.SafeProblem", "SafeProblem")
                        .WithMany("Equipments")
                        .HasForeignKey("SafeProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Safe.Entities.SafeProblemRltFile", b =>
                {
                    b.HasOne("SnAbp.File.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Safe.Entities.SafeProblem", "SafeProblem")
                        .WithMany("Files")
                        .HasForeignKey("SafeProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Safe.Entities.SafeSpeechVideo", b =>
                {
                    b.HasOne("SnAbp.File.Entities.File", "Video")
                        .WithMany()
                        .HasForeignKey("VideoId");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.BasePrice", b =>
                {
                    b.HasOne("SnAbp.Common.Entities.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.StdBasic.Entities.ComputerCode", "ComputerCode")
                        .WithMany()
                        .HasForeignKey("ComputerCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Identity.DataDictionary", "StandardCode")
                        .WithMany()
                        .HasForeignKey("StandardCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Identity.DataDictionary", "Standard")
                        .WithMany()
                        .HasForeignKey("StandardId");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.Block", b =>
                {
                    b.HasOne("SnAbp.StdBasic.Entities.BlockCategory", "BlockCategory")
                        .WithMany()
                        .HasForeignKey("BlockCategoryId");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.BlockCategory", b =>
                {
                    b.HasOne("SnAbp.StdBasic.Entities.BlockCategory", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.ComponentCategory", b =>
                {
                    b.HasOne("SnAbp.StdBasic.Entities.ComponentCategory", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.ComponentCategoryRltMVDProperty", b =>
                {
                    b.HasOne("SnAbp.StdBasic.Entities.ComponentCategory", "ComponentCategory")
                        .WithMany("ComponentCategoryRltMVDProperties")
                        .HasForeignKey("ComponentCategoryId");

                    b.HasOne("SnAbp.StdBasic.Entities.MVDProperty", "MVDProperty")
                        .WithMany()
                        .HasForeignKey("MVDPropertyId");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.ComponentCategoryRltMaterial", b =>
                {
                    b.HasOne("SnAbp.StdBasic.Entities.ComponentCategory", "ComponentCategory")
                        .WithMany()
                        .HasForeignKey("ComponentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.StdBasic.Entities.ComputerCode", "ComputerCode")
                        .WithMany()
                        .HasForeignKey("ComputerCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.ComponentCategoryRltProductCategory", b =>
                {
                    b.HasOne("SnAbp.StdBasic.Entities.ComponentCategory", "ComponentCategory")
                        .WithMany("ComponentCategoryRltProductCategories")
                        .HasForeignKey("ComponentCategoryId");

                    b.HasOne("SnAbp.StdBasic.Entities.ProductCategory", "ProductionCategory")
                        .WithMany("ComponentCategoryRltProductCategories")
                        .HasForeignKey("ProductionCategoryId")
                        .HasConstraintName("FK_Sn_StdBasic_ComponentCategoryRltProductCategory_Sn_StdBasi~1");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.ComponentCategoryRltQuota", b =>
                {
                    b.HasOne("SnAbp.StdBasic.Entities.ComponentCategory", "ComponentCategory")
                        .WithMany()
                        .HasForeignKey("ComponentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.StdBasic.Entities.Quota", "Quota")
                        .WithMany()
                        .HasForeignKey("QuotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.EquipmentControlType", b =>
                {
                    b.HasOne("SnAbp.StdBasic.Entities.Manufacturer", "Manufacturer")
                        .WithMany("EquipmentControlTypes")
                        .HasForeignKey("ManufacturerId");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.IndividualProject", b =>
                {
                    b.HasOne("SnAbp.StdBasic.Entities.IndividualProject", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("SnAbp.Identity.DataDictionary", "Specialty")
                        .WithMany()
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.InfluenceRange", b =>
                {
                    b.HasOne("SnAbp.Identity.DataDictionary", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.MVDProperty", b =>
                {
                    b.HasOne("SnAbp.StdBasic.Entities.MVDCategory", "MVDCategory")
                        .WithMany("MVDProperties")
                        .HasForeignKey("MVDCategoryId");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.Manufacturer", b =>
                {
                    b.HasOne("SnAbp.StdBasic.Entities.Manufacturer", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.Model", b =>
                {
                    b.HasOne("SnAbp.StdBasic.Entities.ComponentCategory", "ComponentCategory")
                        .WithMany()
                        .HasForeignKey("ComponentCategoryId");

                    b.HasOne("SnAbp.StdBasic.Entities.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("SnAbp.StdBasic.Entities.ProductCategory", "ProductCategory")
                        .WithMany()
                        .HasForeignKey("ProductCategoryId");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.ModelFile", b =>
                {
                    b.HasOne("SnAbp.File.Entities.File", "FamilyFile")
                        .WithMany()
                        .HasForeignKey("FamilyFileId");

                    b.HasOne("SnAbp.StdBasic.Entities.Model", "Model")
                        .WithMany("ModelFiles")
                        .HasForeignKey("ModelId");

                    b.HasOne("SnAbp.File.Entities.File", "Thumb")
                        .WithMany()
                        .HasForeignKey("ThumbId");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.ModelRltBlock", b =>
                {
                    b.HasOne("SnAbp.StdBasic.Entities.Block", "Block")
                        .WithMany()
                        .HasForeignKey("BlockId");

                    b.HasOne("SnAbp.StdBasic.Entities.Model", "Model")
                        .WithMany("ModelRltBlocks")
                        .HasForeignKey("ModelId");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.ModelRltMVDProperty", b =>
                {
                    b.HasOne("SnAbp.StdBasic.Entities.MVDProperty", "MVDProperty")
                        .WithMany()
                        .HasForeignKey("MVDPropertyId");

                    b.HasOne("SnAbp.StdBasic.Entities.Model", "Model")
                        .WithMany("ModelRltMVDProperties")
                        .HasForeignKey("ModelId");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.ModelRltModel", b =>
                {
                    b.HasOne("SnAbp.StdBasic.Entities.Model", "Model")
                        .WithMany("ModelRltModels")
                        .HasForeignKey("ModelId");

                    b.HasOne("SnAbp.StdBasic.Entities.Model", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.ModelTerminal", b =>
                {
                    b.HasOne("SnAbp.StdBasic.Entities.Model", "Model")
                        .WithMany("Terminals")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.StdBasic.Entities.ProductCategory", "ProductCategory")
                        .WithMany()
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.ProcessTemplate", b =>
                {
                    b.HasOne("SnAbp.StdBasic.Entities.ProcessTemplate", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.ProductCategory", b =>
                {
                    b.HasOne("SnAbp.StdBasic.Entities.ProductCategory", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.ProductCategoryRltMVDProperty", b =>
                {
                    b.HasOne("SnAbp.StdBasic.Entities.MVDProperty", "MVDProperty")
                        .WithMany()
                        .HasForeignKey("MVDPropertyId");

                    b.HasOne("SnAbp.StdBasic.Entities.ProductCategory", "ProductCategory")
                        .WithMany("ProductCategoryRltMVDProperties")
                        .HasForeignKey("ProductCategoryId");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.ProductCategoryRltMaterial", b =>
                {
                    b.HasOne("SnAbp.StdBasic.Entities.ComputerCode", "ComputerCode")
                        .WithMany()
                        .HasForeignKey("ComputerCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.StdBasic.Entities.ProductCategory", "ProductCategory")
                        .WithMany()
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.ProductCategoryRltQuota", b =>
                {
                    b.HasOne("SnAbp.StdBasic.Entities.ProductCategory", "ProductCategory")
                        .WithMany()
                        .HasForeignKey("ProductCategoryId");

                    b.HasOne("SnAbp.StdBasic.Entities.Quota", "Quota")
                        .WithMany()
                        .HasForeignKey("QuotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.ProjectItemRltComponentCategory", b =>
                {
                    b.HasOne("SnAbp.StdBasic.Entities.ComponentCategory", "ComponentCategory")
                        .WithMany()
                        .HasForeignKey("ComponentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.StdBasic.Entities.ProjectItem", "ProjectItem")
                        .WithMany()
                        .HasForeignKey("ProjectItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.ProjectItemRltIndividualProject", b =>
                {
                    b.HasOne("SnAbp.StdBasic.Entities.IndividualProject", "IndividualProject")
                        .WithMany()
                        .HasForeignKey("IndividualProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.StdBasic.Entities.ProjectItem", "ProjectItem")
                        .WithMany()
                        .HasForeignKey("ProjectItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.ProjectItemRltProcessTemplate", b =>
                {
                    b.HasOne("SnAbp.StdBasic.Entities.ProcessTemplate", "ProcessTemplate")
                        .WithMany()
                        .HasForeignKey("ProcessTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.ProjectItemRltProductCategory", b =>
                {
                    b.HasOne("SnAbp.StdBasic.Entities.ProductCategory", "ProductCategory")
                        .WithMany()
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.StdBasic.Entities.ProjectItem", "ProjectItem")
                        .WithMany()
                        .HasForeignKey("ProjectItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.Quota", b =>
                {
                    b.HasOne("SnAbp.StdBasic.Entities.QuotaCategory", "QuotaCategory")
                        .WithMany()
                        .HasForeignKey("QuotaCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.QuotaCategory", b =>
                {
                    b.HasOne("SnAbp.Common.Entities.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.StdBasic.Entities.QuotaCategory", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("SnAbp.Identity.DataDictionary", "Specialty")
                        .WithMany()
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Identity.DataDictionary", "StandardCode")
                        .WithMany()
                        .HasForeignKey("StandardCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.QuotaItem", b =>
                {
                    b.HasOne("SnAbp.StdBasic.Entities.BasePrice", "BasePrice")
                        .WithMany()
                        .HasForeignKey("BasePriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.StdBasic.Entities.Quota", "Quota")
                        .WithMany()
                        .HasForeignKey("QuotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.RepairGroup", b =>
                {
                    b.HasOne("SnAbp.StdBasic.Entities.RepairGroup", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.RepairItem", b =>
                {
                    b.HasOne("SnAbp.StdBasic.Entities.RepairGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Identity.DataDictionary", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.RepairItemRltComponentCategory", b =>
                {
                    b.HasOne("SnAbp.StdBasic.Entities.ComponentCategory", "ComponentCategory")
                        .WithMany()
                        .HasForeignKey("ComponentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.StdBasic.Entities.RepairItem", "RepairItem")
                        .WithMany("RepairItemRltComponentCategories")
                        .HasForeignKey("RepairItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.RepairItemRltOrganizationType", b =>
                {
                    b.HasOne("SnAbp.Identity.DataDictionary", "OrganizationType")
                        .WithMany()
                        .HasForeignKey("OrganizationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.StdBasic.Entities.RepairItem", "RepairItem")
                        .WithMany("RepairItemRltOrganizationTypes")
                        .HasForeignKey("RepairItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.RepairTestItem", b =>
                {
                    b.HasOne("SnAbp.File.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.HasOne("SnAbp.StdBasic.Entities.RepairItem", "RepairItem")
                        .WithMany("RepairTestItems")
                        .HasForeignKey("RepairItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.RevitConnector", b =>
                {
                    b.HasOne("SnAbp.StdBasic.Entities.ModelFile", "ModelFile")
                        .WithMany("RevitConnectors")
                        .HasForeignKey("ModelFileId");
                });

            modelBuilder.Entity("SnAbp.StdBasic.Entities.WorkAttention", b =>
                {
                    b.HasOne("SnAbp.Identity.DataDictionary", "RepairTag")
                        .WithMany()
                        .HasForeignKey("RepairTagId");

                    b.HasOne("SnAbp.StdBasic.Entities.WorkAttention", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("SnAbp.Tasks.Entities.TaskRltFile", b =>
                {
                    b.HasOne("SnAbp.File.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.HasOne("SnAbp.Tasks.Task", "Task")
                        .WithMany("TaskRltFiles")
                        .HasForeignKey("TaskId");
                });

            modelBuilder.Entity("SnAbp.Tasks.Entities.TaskRltMember", b =>
                {
                    b.HasOne("SnAbp.Identity.IdentityUser", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId");

                    b.HasOne("SnAbp.Tasks.Task", "Task")
                        .WithMany("TaskRltMembers")
                        .HasForeignKey("TaskId");
                });

            modelBuilder.Entity("SnAbp.Tasks.Task", b =>
                {
                    b.HasOne("SnAbp.Tasks.Task", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("SnAbp.Project.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("SnAbp.Technology.Entities.ConstructInterface", b =>
                {
                    b.HasOne("SnAbp.Identity.DataDictionary", "Builder")
                        .WithMany()
                        .HasForeignKey("BuilderId");

                    b.HasOne("SnAbp.Resource.Entities.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId");

                    b.HasOne("SnAbp.Identity.DataDictionary", "InterfaceManagementType")
                        .WithMany()
                        .HasForeignKey("InterfaceManagementTypeId");

                    b.HasOne("SnAbp.Identity.DataDictionary", "Profession")
                        .WithMany()
                        .HasForeignKey("ProfessionId");
                });

            modelBuilder.Entity("SnAbp.Technology.Entities.ConstructInterfaceInfo", b =>
                {
                    b.HasOne("SnAbp.Identity.DataDictionary", "Builder")
                        .WithMany()
                        .HasForeignKey("BuilderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Technology.Entities.ConstructInterface", "ConstructInterface")
                        .WithMany("ConstructInterfaceInfos")
                        .HasForeignKey("ConstructInterfaceId");

                    b.HasOne("SnAbp.Identity.IdentityUser", "Marker")
                        .WithMany()
                        .HasForeignKey("MarkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Identity.IdentityUser", "Reformer")
                        .WithMany()
                        .HasForeignKey("ReformerId");
                });

            modelBuilder.Entity("SnAbp.Technology.Entities.ConstructInterfaceInfoRltMarkFile", b =>
                {
                    b.HasOne("SnAbp.Technology.Entities.ConstructInterfaceInfo", "ConstructInterfaceInfo")
                        .WithMany("MarkFiles")
                        .HasForeignKey("ConstructInterfaceInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.File.Entities.File", "MarkFile")
                        .WithMany()
                        .HasForeignKey("MarkFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Technology.Entities.Disclose", b =>
                {
                    b.HasOne("SnAbp.Technology.Entities.Disclose", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("SnAbp.Technology.Entities.Material", b =>
                {
                    b.HasOne("SnAbp.Identity.DataDictionary", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("SnAbp.Technology.Entities.MaterialPlan", b =>
                {
                    b.HasOne("SnAbp.Identity.IdentityUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("SnAbp.Bpm.Entities.Workflow", "Workflow")
                        .WithMany()
                        .HasForeignKey("WorkflowId");

                    b.HasOne("SnAbp.Bpm.Entities.WorkflowTemplate", "WorkflowTemplate")
                        .WithMany()
                        .HasForeignKey("WorkflowTemplateId");
                });

            modelBuilder.Entity("SnAbp.Technology.Entities.MaterialPlanFlowInfo", b =>
                {
                    b.HasOne("SnAbp.Technology.Entities.MaterialPlan", "MaterialPlan")
                        .WithMany("MaterialPlanFlowInfos")
                        .HasForeignKey("MaterialPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.Technology.Entities.MaterialPlanRltMaterial", b =>
                {
                    b.HasOne("SnAbp.Technology.Entities.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnAbp.Technology.Entities.MaterialPlan", "MaterialPlan")
                        .WithMany("Materials")
                        .HasForeignKey("MaterialPlanId")
                        .HasConstraintName("FK_Sn_Technology_MaterialPlanRltMaterial_Sn_Technology_Materi~1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnAbp.TenantManagement.TenantConnectionString", b =>
                {
                    b.HasOne("SnAbp.TenantManagement.Tenant", null)
                        .WithMany("ConnectionStrings")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLogAction", b =>
                {
                    b.HasOne("Volo.Abp.AuditLogging.AuditLog", null)
                        .WithMany("Actions")
                        .HasForeignKey("AuditLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.EntityChange", b =>
                {
                    b.HasOne("Volo.Abp.AuditLogging.AuditLog", null)
                        .WithMany("EntityChanges")
                        .HasForeignKey("AuditLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.EntityPropertyChange", b =>
                {
                    b.HasOne("Volo.Abp.AuditLogging.EntityChange", null)
                        .WithMany("PropertyChanges")
                        .HasForeignKey("EntityChangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
